System.register([],(function(e,t){"use strict";return{execute:function(){
/**
             * Make a map and return a function for checking if a key
             * is in that map.
             * IMPORTANT: all calls of this function must be prefixed with
             * \/\*#\_\_PURE\_\_\*\/
             * So that rollup can tree-shake them if necessary.
             */
function t(e,t){const n=Object.create(null),o=e.split(",");for(let r=0;r<o.length;r++)n[o[r]]=!0;return t?e=>!!n[e.toLowerCase()]:e=>!!n[e]}function n(e){if(x(e)){const t={};for(let o=0;o<e.length;o++){const r=e[o],s=E(r)?l(r):n(r);if(s)for(const e in s)t[e]=s[e]}return t}return E(e)||F(e)?e:void 0}e({$:i,E:Zo,G:function(e){const t=x(e)?new Array(e.length):{};for(const n in e)t[n]=Ct(e,n);return t},H:ct,J:function(){return function(){const e=sr();return e.setupContext||(e.setupContext=dr(e))}// Actual implementation
().attrs},L:function(){return J},M:function(e){J&&J.cleanups.push(e)},N:
/**
             * Compiler runtime helper for rendering `<slot/>`
             * @private
             */
function(e,t,n={},// this is not a user-facing function, so the fallback is always generated by
// the compiler and guaranteed to be a function returning an array
o,r){if(qt.isCE||qt.parent&&yn(qt.parent)&&qt.parent.isCE)return Jo("slot","default"===t?null:{name:t},o&&o());let s=e[t];// a compiled slot disables block tracking by default to avoid manual
// invocation interfering with template-based block tracking, but in
// `renderSlot` we can be sure that it's template-based so we can force
// enable it.
s&&s._c&&(s._d=!1),Vo();const l=s&&Wn(s(n)),i=Do($o,{key:n.key||// slot content array of a dynamic conditional slot may have a branch
// key attached in the `createSlots` helper, respect that
l&&l.key||`_${t}`},l||(o?o():[]),l&&1/* SlotFlags.STABLE */===e._?64/* PatchFlags.STABLE_FRAGMENT */:-2/* PatchFlags.BAIL */);return!r&&i.scopeId&&(i.slotScopeIds=[i.scopeId+"-s"]),s&&s._c&&(s._d=!0),i},P:Cn,Q:xn,S:Vo,U:Do,V:Xt,W:
/**
             * @private
             */
function(e,t){return Bn(Vn,e,!0,t)||e},X:
/**
             * @private
             */
function(e,t,n,o,r,s){return Bo(Go(e,t,n,o,r,s,!0/* isBlock */))}
/**
             * Create a block root vnode. Takes the same exact arguments as `createVNode`.
             * A block root keeps track of dynamic nodes within the block in the
             * `dynamicChildren` array.
             *
             * @private
             */,Y:Go,Z:
/**
             * Set scope id when creating hoisted vnodes.
             * @private compiler helper
             */
function(e){Gt=e}
/**
             * Technically we no longer need this after 3.0.8 but we need to keep the same
             * API for backwards compat w/ code generated by compilers.
             * @private
             */,_:function(){Gt=null}
/**
             * Wrap a slot function to memoize current rendering instance
             * @private compiler helper
             */,a:tt,a1:n,a2:
/**
             * Actual implementation
             */
function(e,t,n,o){let r;const s=n&&n[o];if(x(e)||E(e)){r=new Array(e.length);for(let n=0,o=e.length;n<o;n++)r[n]=t(e[n],n,void 0,s&&s[n])}else if("number"==typeof e){r=new Array(e);for(let n=0;n<e;n++)r[n]=t(n+1,n,void 0,s&&s[n])}else if(F(e))if(e[Symbol.iterator])r=Array.from(e,((e,n)=>t(e,n,void 0,s&&s[n])));else{const n=Object.keys(e);r=new Array(n.length);for(let o=0,l=n.length;o<l;o++){const l=n[o];r[o]=t(e[l],l,o,s&&s[o])}}else r=[];return n&&(n[o]=r),r},b:Wo,d:// implementation, close to no-op
function(e){return k(e)?{setup:e,name:e.name}:e},h:gr,i:nn,k:// Simple effect.
function(e,t){return sn(e,null,t)}// initial value for watchers to trigger on undefined initial values
,m:ht,n:Rt,p:tn,q:
/**
             * Adds directives to a VNode.
             */
function(e,t){const n=qt;if(null===n)return e;const o=hr(n)||n.proxy,r=e.dirs||(e.dirs=[]);for(let s=0;s<t.length;s++){let[e,n,l,i=f]=t[s];e&&(k(e)&&(e={mounted:e,updated:e}),e.deep&&an(n),r.push({dir:e,instance:o,value:n,oldValue:void 0,arg:l,modifiers:i}))}return e},r:function(e){return vt(e,!1)},s:function(e){return vt(e,!0)},u:mt,v:
/**
             * @private
             */
function(e){return Bn(In,e)}// implementation
,w:rn,x:Xo,y:Ct});const o=/;(?![^(]*\))/g,r=/:([^]+)/,s=/\/\*.*?\*\//gs;function l(e){const t={};return e.replace(s,"").split(o).forEach((e=>{if(e){const n=e.split(r);n.length>1&&(t[n[0].trim()]=n[1].trim())}})),t}function i(e){let t="";if(E(e))t=e;else if(x(e))for(let n=0;n<e.length;n++){const o=i(e[n]);o&&(t+=o+" ")}else if(F(e))for(const n in e)e[n]&&(t+=n+" ");return t.trim()}
/**
             * On the client we only need to offer special cases for boolean attributes that
             * have different names from their corresponding dom properties:
             * - itemscope -> N/A
             * - allowfullscreen -> allowFullscreen
             * - formnovalidate -> formNoValidate
             * - ismap -> isMap
             * - nomodule -> noModule
             * - novalidate -> noValidate
             * - readonly -> readOnly
             */const c=t("itemscope,allowfullscreen,formnovalidate,ismap,nomodule,novalidate,readonly");
/**
             * Boolean attributes should be included if the value is truthy or ''.
             * e.g. `<select multiple>` compiles to `{ multiple: '' }`
             */
function a(e){return!!e||""===e}
/**
             * For converting {{ interpolation }} values to displayed strings.
             * @private
             */e("a0",(e=>E(e)?e:null==e?"":x(e)||F(e)&&(e.toString===T||!k(e.toString))?JSON.stringify(e,u,2):String(e)));const u=(e,t)=>// can't use isRef here since @vue/shared has no deps
t&&t.__v_isRef?u(e,t.value):w(t)?{[`Map(${t.size})`]:[...t.entries()].reduce(((e,[t,n])=>(e[`${t} =>`]=n,e)),{})}:S(t)?{[`Set(${t.size})`]:[...t.values()]}:!F(t)||x(t)||M(t)?t:String(t),f={},p=[],d=()=>{},h=()=>!1,v=/^on[^a-z]/,g=e=>v.test(e),m=e=>e.startsWith("onUpdate:"),_=Object.assign,y=(e,t)=>{const n=e.indexOf(t);n>-1&&e.splice(n,1)},b=Object.prototype.hasOwnProperty,C=(e,t)=>b.call(e,t),x=Array.isArray,w=e=>"[object Map]"===L(e),S=e=>"[object Set]"===L(e),k=e=>"function"==typeof e,E=e=>"string"==typeof e,A=e=>"symbol"==typeof e,F=e=>null!==e&&"object"==typeof e,O=e=>F(e)&&k(e.then)&&k(e.catch),T=Object.prototype.toString,L=e=>T.call(e),$=e=>L(e).slice(8,-1),M=e=>"[object Object]"===L(e),P=e=>E(e)&&"NaN"!==e&&"-"!==e[0]&&""+parseInt(e,10)===e,j=t(// the leading comma is intentional so empty string "" is also included
",key,ref,ref_for,ref_key,onVnodeBeforeMount,onVnodeMounted,onVnodeBeforeUpdate,onVnodeUpdated,onVnodeBeforeUnmount,onVnodeUnmounted"),R=e=>{const t=Object.create(null);return n=>t[n]||(t[n]=e(n))},N=/-(\w)/g,V=R((e=>e.replace(N,((e,t)=>t?t.toUpperCase():"")))),I=/\B([A-Z])/g,U=R((e=>e.replace(I,"-$1").toLowerCase())),B=R((e=>e.charAt(0).toUpperCase()+e.slice(1))),D=R((e=>e?`on${B(e)}`:"")),W=(e,t)=>!Object.is(e,t),z=(e,t)=>{for(let n=0;n<e.length;n++)e[n](t)},H=(e,t,n)=>{Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:n})},K=e=>{const t=parseFloat(e);return isNaN(t)?e:t};let q;const G=()=>q||(q="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{});let J;class X{constructor(e=!1){this.detached=e,
/**
                     * @internal
                     */
this.active=!0,
/**
                     * @internal
                     */
this.effects=[],
/**
                     * @internal
                     */
this.cleanups=[],this.parent=J,!e&&J&&(this.index=(J.scopes||(J.scopes=[])).push(this)-1)}run(e){if(this.active){const t=J;try{return J=this,e()}finally{J=t}}}
/**
                 * This should only be called on non-detached scopes
                 * @internal
                 */on(){J=this}
/**
                 * This should only be called on non-detached scopes
                 * @internal
                 */off(){J=this.parent}stop(e){if(this.active){let t,n;for(t=0,n=this.effects.length;t<n;t++)this.effects[t].stop();for(t=0,n=this.cleanups.length;t<n;t++)this.cleanups[t]();if(this.scopes)for(t=0,n=this.scopes.length;t<n;t++)this.scopes[t].stop(!0);// nested scope, dereference from parent to avoid memory leaks
if(!this.detached&&this.parent&&!e){// optimized O(1) removal
const e=this.parent.scopes.pop();e&&e!==this&&(this.parent.scopes[this.index]=e,e.index=this.index)}this.parent=void 0,this.active=!1}}}const Z=e=>{const t=new Set(e);return t.w=0,t.n=0,t},Q=e=>(e.w&ne)>0,Y=e=>(e.n&ne)>0,ee=new WeakMap;// The number of effects currently being tracked recursively.
let te=0,ne=1;
/**
             * The bitwise track markers support at most 30 levels of recursion.
             * This value is chosen to enable modern JS engines to use a SMI on all platforms.
             * When recursion depth is greater, fall back to using a full cleanup.
             */
const oe=30;let re;const se=Symbol(""),le=Symbol("");class ie{constructor(e,t=null,n){this.fn=e,this.scheduler=t,this.active=!0,this.deps=[],this.parent=void 0,function(e,t=J){t&&t.active&&t.effects.push(e)}(this,n)}run(){if(!this.active)return this.fn();let e=re,t=ae;for(;e;){if(e===this)return;e=e.parent}try{return this.parent=re,re=this,ae=!0,ne=1<<++te,te<=oe?(({deps:e})=>{if(e.length)for(let t=0;t<e.length;t++)e[t].w|=ne;// set was tracked
})(this):ce(this),this.fn()}finally{te<=oe&&(e=>{const{deps:t}=e;if(t.length){let n=0;for(let o=0;o<t.length;o++){const r=t[o];Q(r)&&!Y(r)?r.delete(e):t[n++]=r,// clear bits
r.w&=~ne,r.n&=~ne}t.length=n}})(this),ne=1<<--te,re=this.parent,ae=t,this.parent=void 0,this.deferStop&&this.stop()}}stop(){// stopped while running itself - defer the cleanup
re===this?this.deferStop=!0:this.active&&(ce(this),this.onStop&&this.onStop(),this.active=!1)}}function ce(e){const{deps:t}=e;if(t.length){for(let n=0;n<t.length;n++)t[n].delete(e);t.length=0}}let ae=!0;const ue=[];function fe(){ue.push(ae),ae=!1}function pe(){const e=ue.pop();ae=void 0===e||e}function de(e,t,n){if(ae&&re){let t=ee.get(e);t||ee.set(e,t=new Map);let o=t.get(n);o||t.set(n,o=Z()),he(o)}}function he(e,t){let n=!1;te<=oe?Y(e)||(e.n|=ne,// set newly tracked
n=!Q(e)):// Full cleanup mode.
n=!e.has(re),n&&(e.add(re),re.deps.push(e))}function ve(e,t,n,o,r,s){const l=ee.get(e);if(!l)// never been tracked
return;let i=[];if("clear"/* TriggerOpTypes.CLEAR */===t)// collection being cleared
// trigger all effects for target
i=[...l.values()];else if("length"===n&&x(e)){const e=K(o);l.forEach(((t,n)=>{("length"===n||n>=e)&&i.push(t)}))}else// also run for iteration key on ADD | DELETE | Map.SET
switch(// schedule runs for SET | ADD | DELETE
void 0!==n&&i.push(l.get(n)),t){case"add"/* TriggerOpTypes.ADD */:x(e)?P(n)&&// new index added to array -> length changes
i.push(l.get("length")):(i.push(l.get(se)),w(e)&&i.push(l.get(le)));break;case"delete"/* TriggerOpTypes.DELETE */:x(e)||(i.push(l.get(se)),w(e)&&i.push(l.get(le)));break;case"set"/* TriggerOpTypes.SET */:w(e)&&i.push(l.get(se))}if(1===i.length)i[0]&&ge(i[0]);else{const e=[];for(const t of i)t&&e.push(...t);ge(Z(e))}}function ge(e,t){// spread into array for stabilization
const n=x(e)?e:[...e];for(const o of n)o.computed&&me(o);for(const o of n)o.computed||me(o)}function me(e,t){(e!==re||e.allowRecurse)&&(e.scheduler?e.scheduler():e.run())}const _e=t("__proto__,__v_isRef,__isVue"),ye=new Set(Object.getOwnPropertyNames(Symbol).filter((e=>"arguments"!==e&&"caller"!==e)).map((e=>Symbol[e])).filter(A)),be=ke(),Ce=ke(!1,!0),xe=ke(!0),we=Se();function Se(){const e={};return["includes","indexOf","lastIndexOf"].forEach((t=>{e[t]=function(...e){const n=ct(this);for(let t=0,r=this.length;t<r;t++)de(n,0/* TrackOpTypes.GET */,t+"");// we run the method using the original args first (which may be reactive)
const o=n[t](...e);return-1===o||!1===o?n[t](...e.map(ct)):o}})),["push","pop","shift","unshift","splice"].forEach((t=>{e[t]=function(...e){fe();const n=ct(this)[t].apply(this,e);return pe(),n}})),e}function ke(e=!1,t=!1){return function(n,o,r){if("__v_isReactive"/* ReactiveFlags.IS_REACTIVE */===o)return!e;if("__v_isReadonly"/* ReactiveFlags.IS_READONLY */===o)return e;if("__v_isShallow"/* ReactiveFlags.IS_SHALLOW */===o)return t;if("__v_raw"/* ReactiveFlags.RAW */===o&&r===(e?t?et:Ye:t?Qe:Ze).get(n))return n;const s=x(n);if(!e&&s&&C(we,o))return Reflect.get(we,o,r);const l=Reflect.get(n,o,r);return(A(o)?ye.has(o):_e(o))?l:(e||de(n,0/* TrackOpTypes.GET */,o),t?l:ht(l)?s&&P(o)?l:l.value:F(l)?e?nt(l):tt(l):l)}}function Ee(e=!1){return function(t,n,o,r){let s=t[n];if(st(s)&&ht(s)&&!ht(o))return!1;if(!e&&(lt(o)||st(o)||(s=ct(s),o=ct(o)),!x(t)&&ht(s)&&!ht(o)))return s.value=o,!0;const l=x(t)&&P(n)?Number(n)<t.length:C(t,n),i=Reflect.set(t,n,o,r);// don't trigger if target is something up in the prototype chain of original
return t===ct(r)&&(l?W(o,s)&&ve(t,"set"/* TriggerOpTypes.SET */,n,o):ve(t,"add"/* TriggerOpTypes.ADD */,n,o)),i}}const Ae={get:be,set:Ee(),deleteProperty:function(e,t){const n=C(e,t);e[t];const o=Reflect.deleteProperty(e,t);return o&&n&&ve(e,"delete"/* TriggerOpTypes.DELETE */,t,void 0),o},has:function(e,t){const n=Reflect.has(e,t);return A(t)&&ye.has(t)||de(e,0/* TrackOpTypes.HAS */,t),n},ownKeys:function(e){return de(e,0/* TrackOpTypes.ITERATE */,x(e)?"length":se),Reflect.ownKeys(e)}},Fe={get:xe,set:(e,t)=>!0,deleteProperty:(e,t)=>!0},Oe=_({},Ae,{get:Ce,set:Ee(!0)}),Te=e=>e,Le=e=>Reflect.getPrototypeOf(e);function $e(e,t,n=!1,o=!1){const r=ct(// #1772: readonly(reactive(Map)) should return readonly + reactive version
// of the value
e=e.__v_raw),s=ct(t);n||(t!==s&&de(r,0/* TrackOpTypes.GET */,t),de(r,0/* TrackOpTypes.GET */,s));const{has:l}=Le(r),i=o?Te:n?ft:ut;return l.call(r,t)?i(e.get(t)):l.call(r,s)?i(e.get(s)):void(e!==r&&// #3602 readonly(reactive(Map))
// ensure that the nested reactive `Map` can do tracking for itself
e.get(t))}function Me(e,t=!1){const n=this.__v_raw,o=ct(n),r=ct(e);return t||(e!==r&&de(o,0/* TrackOpTypes.HAS */,e),de(o,0/* TrackOpTypes.HAS */,r)),e===r?n.has(e):n.has(e)||n.has(r)}function Pe(e,t=!1){return e=e.__v_raw,!t&&de(ct(e),0/* TrackOpTypes.ITERATE */,se),Reflect.get(e,"size",e)}function je(e){e=ct(e);const t=ct(this);return Le(t).has.call(t,e)||(t.add(e),ve(t,"add"/* TriggerOpTypes.ADD */,e,e)),this}function Re(e,t){t=ct(t);const n=ct(this),{has:o,get:r}=Le(n);let s=o.call(n,e);s||(e=ct(e),s=o.call(n,e));const l=r.call(n,e);return n.set(e,t),s?W(t,l)&&ve(n,"set"/* TriggerOpTypes.SET */,e,t):ve(n,"add"/* TriggerOpTypes.ADD */,e,t),this}function Ne(e){const t=ct(this),{has:n,get:o}=Le(t);let r=n.call(t,e);r||(e=ct(e),r=n.call(t,e)),o&&o.call(t,e);// forward the operation before queueing reactions
const s=t.delete(e);return r&&ve(t,"delete"/* TriggerOpTypes.DELETE */,e,void 0),s}function Ve(){const e=ct(this),t=0!==e.size,n=e.clear();return t&&ve(e,"clear"/* TriggerOpTypes.CLEAR */,void 0,void 0),n}function Ie(e,t){return function(n,o){const r=this,s=r.__v_raw,l=ct(s),i=t?Te:e?ft:ut;return!e&&de(l,0/* TrackOpTypes.ITERATE */,se),s.forEach(((e,t)=>n.call(o,i(e),i(t),r)))}}function Ue(e,t,n){return function(...o){const r=this.__v_raw,s=ct(r),l=w(s),i="entries"===e||e===Symbol.iterator&&l,c="keys"===e&&l,a=r[e](...o),u=n?Te:t?ft:ut;// return a wrapped iterator which returns observed versions of the
// values emitted from the real iterator
return!t&&de(s,0/* TrackOpTypes.ITERATE */,c?le:se),{// iterator protocol
next(){const{value:e,done:t}=a.next();return t?{value:e,done:t}:{value:i?[u(e[0]),u(e[1])]:u(e),done:t}},// iterable protocol
[Symbol.iterator](){return this}}}}function Be(e){return function(...t){return"delete"/* TriggerOpTypes.DELETE */!==e&&this}}function De(){const e={get(e){return $e(this,e)},get size(){return Pe(this)},has:Me,add:je,set:Re,delete:Ne,clear:Ve,forEach:Ie(!1,!1)},t={get(e){return $e(this,e,!1,!0)},get size(){return Pe(this)},has:Me,add:je,set:Re,delete:Ne,clear:Ve,forEach:Ie(!1,!0)},n={get(e){return $e(this,e,!0)},get size(){return Pe(this,!0)},has(e){return Me.call(this,e,!0)},add:Be("add"/* TriggerOpTypes.ADD */),set:Be("set"/* TriggerOpTypes.SET */),delete:Be("delete"/* TriggerOpTypes.DELETE */),clear:Be("clear"/* TriggerOpTypes.CLEAR */),forEach:Ie(!0,!1)},o={get(e){return $e(this,e,!0,!0)},get size(){return Pe(this,!0)},has(e){return Me.call(this,e,!0)},add:Be("add"/* TriggerOpTypes.ADD */),set:Be("set"/* TriggerOpTypes.SET */),delete:Be("delete"/* TriggerOpTypes.DELETE */),clear:Be("clear"/* TriggerOpTypes.CLEAR */),forEach:Ie(!0,!0)};return["keys","values","entries",Symbol.iterator].forEach((r=>{e[r]=Ue(r,!1,!1),n[r]=Ue(r,!0,!1),t[r]=Ue(r,!1,!0),o[r]=Ue(r,!0,!0)})),[e,n,t,o]}const[We,ze,He,Ke]=De();function qe(e,t){const n=t?e?Ke:He:e?ze:We;return(t,o,r)=>"__v_isReactive"/* ReactiveFlags.IS_REACTIVE */===o?!e:"__v_isReadonly"/* ReactiveFlags.IS_READONLY */===o?e:"__v_raw"/* ReactiveFlags.RAW */===o?t:Reflect.get(C(n,o)&&o in t?n:t,o,r)}const Ge={get:qe(!1,!1)},Je={get:qe(!1,!0)},Xe={get:qe(!0,!1)},Ze=new WeakMap,Qe=new WeakMap,Ye=new WeakMap,et=new WeakMap;function tt(e){// if trying to observe a readonly proxy, return the readonly version.
return st(e)?e:ot(e,!1,Ae,Ge,Ze)}
/**
             * Return a shallowly-reactive copy of the original object, where only the root
             * level properties are reactive. It also does not auto-unwrap refs (even at the
             * root level).
             */
/**
             * Creates a readonly copy of the original object. Note the returned copy is not
             * made reactive, but `readonly` can be called on an already reactive object.
             */
function nt(e){return ot(e,!0,Fe,Xe,Ye)}function ot(e,t,n,o,r){if(!F(e))return e;// target is already a Proxy, return it.
// exception: calling readonly() on a reactive object
if(e.__v_raw&&(!t||!e.__v_isReactive))return e;// target already has corresponding Proxy
const s=r.get(e);if(s)return s;// only specific value types can be observed.
const l=(i=e).__v_skip||!Object.isExtensible(i)?0/* TargetType.INVALID */:function(e){switch(e){case"Object":case"Array":return 1/* TargetType.COMMON */;case"Map":case"Set":case"WeakMap":case"WeakSet":return 2/* TargetType.COLLECTION */;default:return 0/* TargetType.INVALID */}}($(i));var i;if(0/* TargetType.INVALID */===l)return e;const c=new Proxy(e,2/* TargetType.COLLECTION */===l?o:n);return r.set(e,c),c}function rt(e){return st(e)?rt(e.__v_raw):!(!e||!e.__v_isReactive)}function st(e){return!(!e||!e.__v_isReadonly)}function lt(e){return!(!e||!e.__v_isShallow)}function it(e){return rt(e)||st(e)}function ct(e){const t=e&&e.__v_raw;return t?ct(t):e}function at(e){return H(e,"__v_skip"/* ReactiveFlags.SKIP */,!0),e}const ut=e=>F(e)?tt(e):e,ft=e=>F(e)?nt(e):e;function pt(e){ae&&re&&he((e=ct(e)).dep||(e.dep=Z()))}function dt(e,t){(e=ct(e)).dep&&ge(e.dep)}function ht(e){return!(!e||!0!==e.__v_isRef)}function vt(e,t){return ht(e)?e:new gt(e,t)}class gt{constructor(e,t){this.__v_isShallow=t,this.dep=void 0,this.__v_isRef=!0,this._rawValue=t?e:ct(e),this._value=t?e:ut(e)}get value(){return pt(this),this._value}set value(e){const t=this.__v_isShallow||lt(e)||st(e);e=t?e:ct(e),W(e,this._rawValue)&&(this._rawValue=e,this._value=t?e:ut(e),dt(this))}}function mt(e){return ht(e)?e.value:e}const _t={get:(e,t,n)=>mt(Reflect.get(e,t,n)),set:(e,t,n,o)=>{const r=e[t];return ht(r)&&!ht(n)?(r.value=n,!0):Reflect.set(e,t,n,o)}};function yt(e){return rt(e)?e:new Proxy(e,_t)}class bt{constructor(e,t,n){this._object=e,this._key=t,this._defaultValue=n,this.__v_isRef=!0}get value(){const e=this._object[this._key];return void 0===e?this._defaultValue:e}set value(e){this._object[this._key]=e}}function Ct(e,t,n){const o=e[t];return ht(o)?o:new bt(e,t,n)}var xt;class wt{constructor(e,t,n,o){this._setter=t,this.dep=void 0,this.__v_isRef=!0,this[xt]=!1,this._dirty=!0,this.effect=new ie(e,(()=>{this._dirty||(this._dirty=!0,dt(this))})),this.effect.computed=this,this.effect.active=this._cacheable=!o,this.__v_isReadonly=n}get value(){// the computed ref may get wrapped by other proxies e.g. readonly() #3376
const e=ct(this);return pt(e),!e._dirty&&e._cacheable||(e._dirty=!1,e._value=e.effect.run()),e._value}set value(e){this._setter(e)}}function St(e,t,n,o){let r;try{r=o?e(...o):e()}catch(s){Et(s,t,n)}return r}function kt(e,t,n,o){if(k(e)){const r=St(e,t,n,o);return r&&O(r)&&r.catch((e=>{Et(e,t,n)})),r}const r=[];for(let s=0;s<e.length;s++)r.push(kt(e[s],t,n,o));return r}function Et(e,t,n,o=!0){if(t&&t.vnode,t){let o=t.parent;// the exposed instance is the render proxy to keep it consistent with 2.x
const r=t.proxy,s=n;// in production the hook receives only the error code
for(;o;){const t=o.ec;if(t)for(let n=0;n<t.length;n++)if(!1===t[n](e,r,s))return;o=o.parent}// app-level handling
const l=t.appContext.config.errorHandler;if(l)return void St(l,null,10/* ErrorCodes.APP_ERROR_HANDLER */,[e,r,s])}}xt="__v_isReadonly"/* ReactiveFlags.IS_READONLY */;let At=!1,Ft=!1;const Ot=[];let Tt=0;const Lt=[];let $t=null,Mt=0;const Pt=Promise.resolve();let jt=null;function Rt(e){const t=jt||Pt;return e?t.then(this?e.bind(this):e):t}// #2768
// Use binary-search to find a suitable position in the queue,
// so that the queue maintains the increasing order of job's id,
// which can prevent the job from being skipped and also can avoid repeated patching.
function Nt(e){// the dedupe search uses the startIndex argument of Array.includes()
// by default the search index includes the current job that is being run
// so it cannot recursively trigger itself again.
// if the job is a watch() callback, the search will start with a +1 index to
// allow it recursively trigger itself - it is the user's responsibility to
// ensure it doesn't end up in an infinite loop.
Ot.length&&Ot.includes(e,At&&e.allowRecurse?Tt+1:Tt)||(null==e.id?Ot.push(e):Ot.splice(function(e){// the start index should be `flushIndex + 1`
let t=Tt+1,n=Ot.length;for(;t<n;){const o=t+n>>>1;Bt(Ot[o])<e?t=o+1:n=o}return t}(e.id),0,e),Vt())}function Vt(){At||Ft||(Ft=!0,jt=Pt.then(Wt))}function It(e,// if currently flushing, skip the current job itself
t=(At?Tt+1:0)){for(;t<Ot.length;t++){const e=Ot[t];e&&e.pre&&(Ot.splice(t,1),t--,e())}}function Ut(e){if(Lt.length){const e=[...new Set(Lt)];// #1947 already has active queue, nested flushPostFlushCbs call
if(Lt.length=0,$t)return void $t.push(...e);for($t=e,$t.sort(((e,t)=>Bt(e)-Bt(t))),Mt=0;Mt<$t.length;Mt++)$t[Mt]();$t=null,Mt=0}}const Bt=e=>null==e.id?1/0:e.id,Dt=(e,t)=>{const n=Bt(e)-Bt(t);if(0===n){if(e.pre&&!t.pre)return-1;if(t.pre&&!e.pre)return 1}return n};function Wt(e){Ft=!1,At=!0,// Sort queue before flush.
// This ensures that:
// 1. Components are updated from parent to child. (because parent is always
//    created before the child so its render effect will have smaller
//    priority number)
// 2. If a component is unmounted during a parent component's update,
//    its update can be skipped.
Ot.sort(Dt);try{for(Tt=0;Tt<Ot.length;Tt++){const e=Ot[Tt];e&&!1!==e.active&&// console.log(`running:`, job.id)
St(e,null,14/* ErrorCodes.SCHEDULER */)}}finally{Tt=0,Ot.length=0,Ut(),At=!1,jt=null,// some postFlushCb queued jobs!
// keep flushing until it drains.
(Ot.length||Lt.length)&&Wt()}}function zt(e,t,...n){if(e.isUnmounted)return;const o=e.vnode.props||f;let r=n;const s=t.startsWith("update:"),l=s&&t.slice(7);// for v-model update:xxx events, apply modifiers on args
if(l&&l in o){const e=`${"modelValue"===l?"model":l}Modifiers`,{number:t,trim:s}=o[e]||f;s&&(r=n.map((e=>E(e)?e.trim():e))),t&&(r=n.map(K))}let i,c=o[i=D(t)]||// also try camelCase event handler (#2249)
o[i=D(V(t))];// for v-model update:xxx events, also trigger kebab-case equivalent
// for props passed via kebab-case
!c&&s&&(c=o[i=D(U(t))]),c&&kt(c,e,6/* ErrorCodes.COMPONENT_EVENT_HANDLER */,r);const a=o[i+"Once"];if(a){if(e.emitted){if(e.emitted[i])return}else e.emitted={};e.emitted[i]=!0,kt(a,e,6/* ErrorCodes.COMPONENT_EVENT_HANDLER */,r)}}function Ht(e,t,n=!1){const o=t.emitsCache,r=o.get(e);if(void 0!==r)return r;const s=e.emits;let l={},i=!1;// apply mixin/extends props
if(!k(e)){const o=e=>{const n=Ht(e,t,!0);n&&(i=!0,_(l,n))};!n&&t.mixins.length&&t.mixins.forEach(o),e.extends&&o(e.extends),e.mixins&&e.mixins.forEach(o)}return s||i?(x(s)?s.forEach((e=>l[e]=null)):_(l,s),F(e)&&o.set(e,l),l):(F(e)&&o.set(e,null),null)}// Check if an incoming prop key is a declared emit event listener.
// e.g. With `emits: { click: null }`, props named `onClick` and `onclick` are
// both considered matched listeners.
function Kt(e,t){return!(!e||!g(t))&&(t=t.slice(2).replace(/Once$/,""),C(e,t[0].toLowerCase()+t.slice(1))||C(e,U(t))||C(e,t))}
/**
             * mark the current rendering instance for asset resolution (e.g.
             * resolveComponent, resolveDirective) during render
             */let qt=null,Gt=null;
/**
             * Note: rendering calls maybe nested. The function returns the parent rendering
             * instance if present, which should be restored after the render is done:
             *
             * ```js
             * const prev = setCurrentRenderingInstance(i)
             * // ...render
             * setCurrentRenderingInstance(prev)
             * ```
             */
function Jt(e){const t=qt;return qt=e,Gt=e&&e.type.__scopeId||null,t}function Xt(e,t=qt,n){if(!t)return e;// already normalized
if(e._n)return e;const o=(...n)=>{// If a user calls a compiled slot inside a template expression (#1745), it
// can mess up block tracking, so by default we disable block tracking and
// force bail out when invoking a compiled slot (indicated by the ._d flag).
// This isn't necessary if rendering a compiled `<slot>`, so we flip the
// ._d flag off when invoking the wrapped fn inside `renderSlot`.
o._d&&Uo(-1);const r=Jt(t);let s;try{s=e(...n)}finally{Jt(r),o._d&&Uo(1)}return s};// mark normalized to avoid duplicated wrapping
return o._n=!0,// mark this as compiled by default
// this is used in vnode.ts -> normalizeChildren() to set the slot
// rendering flag.
o._c=!0,// disable block tracking by default
o._d=!0,o}function Zt(e){const{type:t,vnode:n,proxy:o,withProxy:r,props:s,propsOptions:[l],slots:i,attrs:c,emit:a,render:u,renderCache:f,data:p,setupState:d,ctx:h,inheritAttrs:v}=e;let g,_;const y=Jt(e);try{if(4/* ShapeFlags.STATEFUL_COMPONENT */&n.shapeFlag){// withProxy is a proxy with a different `has` trap only for
// runtime-compiled render functions using `with` block.
const e=r||o;g=Qo(u.call(e,e,f,s,d,p,h)),_=c}else{// functional
const e=t;// in dev, mark attrs accessed if optional props (attrs === props)
g=Qo(e.length>1?e(s,{attrs:c,slots:i,emit:a}):e(s,null/* we know it doesn't need it */)),_=t.props?c:Qt(c)}}catch(C){Ro.length=0,Et(C,e,1/* ErrorCodes.RENDER_FUNCTION */),g=Jo(Po)}// attr merging
// in dev mode, comments are preserved, and it's possible for a template
// to have comments along side the root element which makes it a fragment
let b=g;if(_&&!1!==v){const e=Object.keys(_),{shapeFlag:t}=b;e.length&&7/* ShapeFlags.COMPONENT */&t&&(l&&e.some(m)&&(// If a v-model listener (onUpdate:xxx) has a corresponding declared
// prop, it indicates this component expects to handle v-model and
// it should not fallthrough.
// related: #1543, #1643, #1989
_=Yt(_,l)),b=Xo(b,_))}// inherit directives
return n.dirs&&(// clone before mutating since the root may be a hoisted vnode
b=Xo(b),b.dirs=b.dirs?b.dirs.concat(n.dirs):n.dirs),// inherit transition data
n.transition&&(b.transition=n.transition),g=b,Jt(y),g}const Qt=e=>{let t;for(const n in e)("class"===n||"style"===n||g(n))&&((t||(t={}))[n]=e[n]);return t},Yt=(e,t)=>{const n={};for(const o in e)m(o)&&o.slice(9)in t||(n[o]=e[o]);return n};function en(e,t,n){const o=Object.keys(t);if(o.length!==Object.keys(e).length)return!0;for(let r=0;r<o.length;r++){const s=o[r];if(t[s]!==e[s]&&!Kt(n,s))return!0}return!1}function tn(e,t){if(rr){let n=rr.provides;// by default an instance inherits its parent's provides object
// but when it needs to provide values of its own, it creates its
// own provides object using parent provides object as prototype.
// this way in `inject` we can simply look up injections from direct
// parent and let the prototype chain do the work.
const o=rr.parent&&rr.parent.provides;o===n&&(n=rr.provides=Object.create(o)),// TS doesn't allow symbol as index type
n[e]=t}}function nn(e,t,n=!1){// fallback to `currentRenderingInstance` so that this can be called in
// a functional component
const o=rr||qt;if(o){// #2400
// to support `app.use` plugins,
// fallback to appContext's `provides` if the instance is at root
const r=null==o.parent?o.vnode.appContext&&o.vnode.appContext.provides:o.parent.provides;if(r&&e in r)// TS doesn't allow symbol as index type
return r[e];if(arguments.length>1)return n&&k(t)?t.call(o.proxy):t}}const on={};// implementation
function rn(e,t,n){return sn(e,t,n)}function sn(e,t,{immediate:n,deep:o,flush:r,onTrack:s,onTrigger:l}=f){const i=rr;let c,a,u=!1,p=!1;if(ht(e)?(c=()=>e.value,u=lt(e)):rt(e)?(c=()=>e,o=!0):x(e)?(p=!0,u=e.some((e=>rt(e)||lt(e))),c=()=>e.map((e=>ht(e)?e.value:rt(e)?an(e):k(e)?St(e,i,2/* ErrorCodes.WATCH_GETTER */):void 0))):// getter with cb
c=k(e)?t?()=>St(e,i,2/* ErrorCodes.WATCH_GETTER */):()=>{if(!i||!i.isUnmounted)return a&&a(),kt(e,i,3/* ErrorCodes.WATCH_CALLBACK */,[v])}:d,t&&o){const e=c;c=()=>an(e())}let h,v=e=>{a=b.onStop=()=>{St(e,i,4/* ErrorCodes.WATCH_CLEANUP */)}};// in SSR there is no need to setup an actual effect, and it should be noop
// unless it's eager or sync flush
if(ur){if(// we will also not call the invalidate callback (+ runner is not set up)
v=d,t?n&&kt(t,i,3/* ErrorCodes.WATCH_CALLBACK */,[c(),p?[]:void 0,v]):c(),"sync"!==r)return d;{const e=_r();h=e.__watcherHandles||(e.__watcherHandles=[])}}let g=p?new Array(e.length).fill(on):on;const m=()=>{if(b.active)if(t){// watch(source, cb)
const e=b.run();(o||u||(p?e.some(((e,t)=>W(e,g[t]))):W(e,g)))&&(// cleanup before running cb again
a&&a(),kt(t,i,3/* ErrorCodes.WATCH_CALLBACK */,[e,// pass undefined as the old value when it's changed for the first time
g===on?void 0:p&&g[0]===on?[]:g,v]),g=e)}else// watchEffect
b.run()};// important: mark the job as a watcher callback so that scheduler knows
// it is allowed to self-trigger (#1727)
let _;m.allowRecurse=!!t,"sync"===r?_=m:"post"===r?_=()=>So(m,i&&i.suspense):(// default: 'pre'
m.pre=!0,i&&(m.id=i.uid),_=()=>Nt(m));const b=new ie(c,_);// initial run
t?n?m():g=b.run():"post"===r?So(b.run.bind(b),i&&i.suspense):b.run();const C=()=>{b.stop(),i&&i.scope&&y(i.scope.effects,b)};return h&&h.push(C),C}// this.$watch
function ln(e,t,n){const o=this.proxy,r=E(e)?e.includes(".")?cn(o,e):()=>o[e]:e.bind(o,o);let s;k(t)?s=t:(s=t.handler,n=t);const l=rr;lr(this);const i=sn(r,s.bind(o),n);return l?lr(l):ir(),i}function cn(e,t){const n=t.split(".");return()=>{let t=e;for(let e=0;e<n.length&&t;e++)t=t[n[e]];return t}}function an(e,t){if(!F(e)||e.__v_skip)return e;if((t=t||new Set).has(e))return e;if(t.add(e),ht(e))an(e.value,t);else if(x(e))for(let n=0;n<e.length;n++)an(e[n],t);else if(S(e)||w(e))e.forEach((e=>{an(e,t)}));else if(M(e))for(const n in e)an(e[n],t);return e}function un(){const e={isMounted:!1,isLeaving:!1,isUnmounting:!1,leavingVNodes:new Map};return Fn((()=>{e.isMounted=!0})),Ln((()=>{e.isUnmounting=!0})),e}const fn=[Function,Array],pn={name:"BaseTransition",props:{mode:String,appear:Boolean,persisted:Boolean,// enter
onBeforeEnter:fn,onEnter:fn,onAfterEnter:fn,onEnterCancelled:fn,// leave
onBeforeLeave:fn,onLeave:fn,onAfterLeave:fn,onLeaveCancelled:fn,// appear
onBeforeAppear:fn,onAppear:fn,onAfterAppear:fn,onAppearCancelled:fn},setup(e,{slots:t}){const n=sr(),o=un();let r;return()=>{const s=t.default&&_n(t.default(),!0);if(!s||!s.length)return;let l=s[0];if(s.length>1)// locate first non-comment child
for(const e of s)if(e.type!==Po){l=e;break}// there's no need to track reactivity for these props so use the raw
// props for a bit better perf
const i=ct(e),{mode:c}=i;if(o.isLeaving)return vn(l);// in the case of <transition><keep-alive/></transition>, we need to
// compare the type of the kept-alive children.
const a=gn(l);if(!a)return vn(l);const u=hn(a,i,o,n);mn(a,u);const f=n.subTree,p=f&&gn(f);let d=!1;const{getTransitionKey:h}=a.type;if(h){const e=h();void 0===r?r=e:e!==r&&(r=e,d=!0)}// handle mode
if(p&&p.type!==Po&&(!zo(a,p)||d)){const e=hn(p,i,o,n);// update old tree's hooks in case of dynamic transition
// switching between different views
if(mn(p,e),"out-in"===c)return o.isLeaving=!0,// return placeholder node and queue update when leave finishes
e.afterLeave=()=>{o.isLeaving=!1,// #6835
// it also needs to be updated when active is undefined
!1!==n.update.active&&n.update()},vn(l);"in-out"===c&&a.type!==Po&&(e.delayLeave=(e,t,n)=>{dn(o,p)[String(p.key)]=p,// early removal callback
e._leaveCb=()=>{t(),e._leaveCb=void 0,delete u.delayedLeave},u.delayedLeave=n})}return l}}};function dn(e,t){const{leavingVNodes:n}=e;let o=n.get(t.type);return o||(o=Object.create(null),n.set(t.type,o)),o}// The transition hooks are attached to the vnode as vnode.transition
// and will be called at appropriate timing in the renderer.
function hn(e,t,n,o){const{appear:r,mode:s,persisted:l=!1,onBeforeEnter:i,onEnter:c,onAfterEnter:a,onEnterCancelled:u,onBeforeLeave:f,onLeave:p,onAfterLeave:d,onLeaveCancelled:h,onBeforeAppear:v,onAppear:g,onAfterAppear:m,onAppearCancelled:_}=t,y=String(e.key),b=dn(n,e),C=(e,t)=>{e&&kt(e,o,9/* ErrorCodes.TRANSITION_HOOK */,t)},w=(e,t)=>{const n=t[1];C(e,t),x(e)?e.every((e=>e.length<=1))&&n():e.length<=1&&n()},S={mode:s,persisted:l,beforeEnter(t){let o=i;if(!n.isMounted){if(!r)return;o=v||i}// for same element (v-show)
t._leaveCb&&t._leaveCb(!0/* cancelled */);// for toggled element with same key (v-if)
const s=b[y];s&&zo(e,s)&&s.el._leaveCb&&// force early removal (not cancelled)
s.el._leaveCb(),C(o,[t])},enter(e){let t=c,o=a,s=u;if(!n.isMounted){if(!r)return;t=g||c,o=m||a,s=_||u}let l=!1;const i=e._enterCb=t=>{l||(l=!0,C(t?s:o,[e]),S.delayedLeave&&S.delayedLeave(),e._enterCb=void 0)};t?w(t,[e,i]):i()},leave(t,o){const r=String(e.key);if(t._enterCb&&t._enterCb(!0/* cancelled */),n.isUnmounting)return o();C(f,[t]);let s=!1;const l=t._leaveCb=n=>{s||(s=!0,o(),C(n?h:d,[t]),t._leaveCb=void 0,b[r]===e&&delete b[r])};b[r]=e,p?w(p,[t,l]):l()},clone:e=>hn(e,t,n,o)};return S}// the placeholder really only handles one special case: KeepAlive
// in the case of a KeepAlive in a leave phase we need to return a KeepAlive
// placeholder with empty content to avoid the KeepAlive instance from being
// unmounted.
function vn(e){if(bn(e))return(e=Xo(e)).children=null,e}function gn(e){return bn(e)?e.children?e.children[0]:void 0:e}function mn(e,t){6/* ShapeFlags.COMPONENT */&e.shapeFlag&&e.component?mn(e.component.subTree,t):128/* ShapeFlags.SUSPENSE */&e.shapeFlag?(e.ssContent.transition=t.clone(e.ssContent),e.ssFallback.transition=t.clone(e.ssFallback)):e.transition=t}function _n(e,t=!1,n){let o=[],r=0;for(let s=0;s<e.length;s++){let l=e[s];// #5360 inherit parent key in case of <template v-for>
const i=null==n?l.key:String(n)+String(null!=l.key?l.key:s);// handle fragment children case, e.g. v-for
l.type===$o?(128/* PatchFlags.KEYED_FRAGMENT */&l.patchFlag&&r++,o=o.concat(_n(l.children,t,i))):(t||l.type!==Po)&&o.push(null!=i?Xo(l,{key:i}):l)}// #1126 if a transition children list contains multiple sub fragments, these
// fragments will be merged into a flat children array. Since each v-for
// fragment may contain different static bindings inside, we need to de-op
// these children to force full diffs to ensure correct behavior.
if(r>1)for(let s=0;s<o.length;s++)o[s].patchFlag=-2/* PatchFlags.BAIL */;return o}const yn=e=>!!e.type.__asyncLoader,bn=e=>e.type.__isKeepAlive;function Cn(e,t){wn(e,"a"/* LifecycleHooks.ACTIVATED */,t)}function xn(e,t){wn(e,"da"/* LifecycleHooks.DEACTIVATED */,t)}function wn(e,t,n=rr){// cache the deactivate branch check wrapper for injected hooks so the same
// hook can be properly deduped by the scheduler. "__wdc" stands for "with
// deactivation check".
const o=e.__wdc||(e.__wdc=()=>{// only fire the hook if the target instance is NOT in a deactivated branch.
let t=n;for(;t;){if(t.isDeactivated)return;t=t.parent}return e()});// In addition to registering it on the target instance, we walk up the parent
// chain and register it on all ancestor instances that are keep-alive roots.
// This avoids the need to walk the entire component tree when invoking these
// hooks, and more importantly, avoids the need to track child components in
// arrays.
if(kn(t,o,n),n){let e=n.parent;for(;e&&e.parent;)bn(e.parent.vnode)&&Sn(o,t,n,e),e=e.parent}}function Sn(e,t,n,o){// injectHook wraps the original for error handling, so make sure to remove
// the wrapped version.
const r=kn(t,e,o,!0/* prepend */);$n((()=>{y(o[t],r)}),n)}function kn(e,t,n=rr,o=!1){if(n){const r=n[e]||(n[e]=[]),s=t.__weh||(t.__weh=(...o)=>{if(n.isUnmounted)return;// disable tracking inside all lifecycle hooks
// since they can potentially be called inside effects.
fe(),// Set currentInstance during hook invocation.
// This assumes the hook does not synchronously trigger other hooks, which
// can only be false when the user does something really funky.
lr(n);const r=kt(t,n,e,o);return ir(),pe(),r});// cache the error handling wrapper for injected hooks so the same hook
// can be properly deduped by the scheduler. "__weh" stands for "with error
// handling".
return o?r.unshift(s):r.push(s),s}}const En=e=>(t,n=rr)=>// post-create lifecycle registrations are noops during SSR (except for serverPrefetch)
(!ur||"sp"/* LifecycleHooks.SERVER_PREFETCH */===e)&&kn(e,((...e)=>t(...e)),n),An=e("B",En("bm"/* LifecycleHooks.BEFORE_MOUNT */)),Fn=e("o",En("m"/* LifecycleHooks.MOUNTED */)),On=e("K",En("bu"/* LifecycleHooks.BEFORE_UPDATE */)),Tn=e("e",En("u"/* LifecycleHooks.UPDATED */)),Ln=e("l",En("bum"/* LifecycleHooks.BEFORE_UNMOUNT */)),$n=e("f",En("um"/* LifecycleHooks.UNMOUNTED */)),Mn=En("sp"/* LifecycleHooks.SERVER_PREFETCH */),Pn=En("rtg"/* LifecycleHooks.RENDER_TRIGGERED */),jn=En("rtc"/* LifecycleHooks.RENDER_TRACKED */);function Rn(e,t=rr){kn("ec"/* LifecycleHooks.ERROR_CAPTURED */,e,t)}function Nn(e,t,n,o){const r=e.dirs,s=t&&t.dirs;for(let l=0;l<r.length;l++){const i=r[l];s&&(i.oldValue=s[l].value);let c=i.dir[o];c&&(// disable tracking inside all lifecycle hooks
// since they can potentially be called inside effects.
fe(),kt(c,n,8/* ErrorCodes.DIRECTIVE_HOOK */,[e.el,i,e,t]),pe())}}const Vn="components",In="directives",Un=Symbol();function Bn(e,t,n=!0,o=!1){const r=qt||rr;if(r){const n=r.type;// explicit self name has highest priority
if(e===Vn){const e=function(e,t=!0){return k(e)?e.displayName||e.name:e.name||t&&e.__name}(n,!1/* do not include inferred name to avoid breaking existing code */);if(e&&(e===t||e===V(t)||e===B(V(t))))return n}const s=// local registration
// check instance[type] first which is resolved for options API
Dn(r[e]||n[e],t)||// global registration
Dn(r.appContext[e],t);return!s&&o?n:s}}function Dn(e,t){return e&&(e[t]||e[V(t)]||e[B(V(t))])}function Wn(e){return e.some((e=>!Wo(e)||e.type!==Po&&!(e.type===$o&&!Wn(e.children))))?e:null}
/**
             * #2437 In Vue 3, functional components do not have a public instance proxy but
             * they exist in the internal parent chain. For code that relies on traversing
             * public $parent chains, skip functional ones and go to the parent instead.
             */const zn=e=>e?cr(e)?hr(e)||e.proxy:zn(e.parent):null,Hn=// Move PURE marker to new line to workaround compiler discarding it
// due to type annotation
_(Object.create(null),{$:e=>e,$el:e=>e.vnode.el,$data:e=>e.data,$props:e=>e.props,$attrs:e=>e.attrs,$slots:e=>e.slots,$refs:e=>e.refs,$parent:e=>zn(e.parent),$root:e=>zn(e.root),$emit:e=>e.emit,$options:e=>Zn(e),$forceUpdate:e=>e.f||(e.f=()=>Nt(e.update)),$nextTick:e=>e.n||(e.n=Rt.bind(e.proxy)),$watch:e=>ln.bind(e)}),Kn={get({_:e},t){const{ctx:n,setupState:o,data:r,props:s,accessCache:l,type:i,appContext:c}=e;// data / props / ctx
// This getter gets called for every property access on the render context
// during render and is a major hotspot. The most expensive part of this
// is the multiple hasOwn() calls. It's much faster to do a simple property
// access on a plain object, so we use an accessCache object (with null
// prototype) to memoize what access type a key corresponds to.
let a;if("$"!==t[0]){const i=l[t];if(void 0!==i)switch(i){case 1/* AccessTypes.SETUP */:return o[t];case 2/* AccessTypes.DATA */:return r[t];case 4/* AccessTypes.CONTEXT */:return n[t];case 3/* AccessTypes.PROPS */:return s[t];// default: just fallthrough
}else{if(o!==f&&C(o,t))return l[t]=1/* AccessTypes.SETUP */,o[t];if(r!==f&&C(r,t))return l[t]=2/* AccessTypes.DATA */,r[t];if(// only cache other properties when instance has declared (thus stable)
// props
(a=e.propsOptions[0])&&C(a,t))return l[t]=3/* AccessTypes.PROPS */,s[t];if(n!==f&&C(n,t))return l[t]=4/* AccessTypes.CONTEXT */,n[t];qn&&(l[t]=0/* AccessTypes.OTHER */)}}const u=Hn[t];let p,d;// public $xxx properties
return u?("$attrs"===t&&de(e,0/* TrackOpTypes.GET */,t),u(e)):// css module (injected by vue-loader)
(p=i.__cssModules)&&(p=p[t])?p:n!==f&&C(n,t)?(// user may set custom properties to `this` that start with `$`
l[t]=4/* AccessTypes.CONTEXT */,n[t]):(// global properties
d=c.config.globalProperties,C(d,t)?d[t]:void 0)},set({_:e},t,n){const{data:o,setupState:r,ctx:s}=e;return r!==f&&C(r,t)?(r[t]=n,!0):o!==f&&C(o,t)?(o[t]=n,!0):!(C(e.props,t)||"$"===t[0]&&t.slice(1)in e||(s[t]=n,0))},has({_:{data:e,setupState:t,accessCache:n,ctx:o,appContext:r,propsOptions:s}},l){let i;return!!n[l]||e!==f&&C(e,l)||t!==f&&C(t,l)||(i=s[0])&&C(i,l)||C(o,l)||C(Hn,l)||C(r.config.globalProperties,l)},defineProperty(e,t,n){return null!=n.get?// invalidate key cache of a getter based property #5417
e._.accessCache[t]=0:C(n,"value")&&this.set(e,t,n.value,null),Reflect.defineProperty(e,t,n)}};let qn=!0;function Gn(e){const t=Zn(e),n=e.proxy,o=e.ctx;// do not cache property access on public proxy during state initialization
qn=!1,// call beforeCreate first before accessing other options since
// the hook may mutate resolved options (#2791)
t.beforeCreate&&Jn(t.beforeCreate,e,"bc"/* LifecycleHooks.BEFORE_CREATE */);const{// state
data:r,computed:s,methods:l,watch:i,provide:c,inject:a,created:// lifecycle
u,beforeMount:f,mounted:p,beforeUpdate:h,updated:v,activated:g,deactivated:m,beforeDestroy:_,beforeUnmount:y,destroyed:b,unmounted:C,render:w,renderTracked:S,renderTriggered:E,errorCaptured:A,serverPrefetch:O,expose:// public API
T,inheritAttrs:L,components:// assets
$,directives:M,filters:P}=t;if(// options initialization order (to be consistent with Vue 2):
// - props (already done outside of this function)
// - inject
// - methods
// - data (deferred since it relies on `this` access)
// - computed
// - watch (deferred since it relies on `this` access)
a&&function(e,t,n=d,o=!1){x(e)&&(e=to(e));for(const r in e){const n=e[r];let s;s=F(n)?"default"in n?nn(n.from||r,n.default,!0/* treat default function as factory */):nn(n.from||r):nn(n),ht(s)&&o?Object.defineProperty(t,r,{enumerable:!0,configurable:!0,get:()=>s.value,set:e=>s.value=e}):t[r]=s}}(a,o,null,e.appContext.config.unwrapInjectedRef),l)for(const d in l){const e=l[d];k(e)&&(o[d]=e.bind(n))}if(r){const t=r.call(n,n);F(t)&&(e.data=tt(t))}// state initialization complete at this point - start caching access
if(qn=!0,s)for(const x in s){const e=s[x],t=k(e)?e.bind(n,n):k(e.get)?e.get.bind(n,n):d,r=!k(e)&&k(e.set)?e.set.bind(n):d,l=vr({get:t,set:r});Object.defineProperty(o,x,{enumerable:!0,configurable:!0,get:()=>l.value,set:e=>l.value=e})}if(i)for(const d in i)Xn(i[d],o,n,d);if(c){const e=k(c)?c.call(n):c;Reflect.ownKeys(e).forEach((t=>{tn(t,e[t])}))}function j(e,t){x(t)?t.forEach((t=>e(t.bind(n)))):t&&e(t.bind(n))}if(u&&Jn(u,e,"c"/* LifecycleHooks.CREATED */),j(An,f),j(Fn,p),j(On,h),j(Tn,v),j(Cn,g),j(xn,m),j(Rn,A),j(jn,S),j(Pn,E),j(Ln,y),j($n,C),j(Mn,O),x(T))if(T.length){const t=e.exposed||(e.exposed={});T.forEach((e=>{Object.defineProperty(t,e,{get:()=>n[e],set:t=>n[e]=t})}))}else e.exposed||(e.exposed={});// options that are handled when creating the instance but also need to be
// applied from mixins
w&&e.render===d&&(e.render=w),null!=L&&(e.inheritAttrs=L),// asset options.
$&&(e.components=$),M&&(e.directives=M)}function Jn(e,t,n){kt(x(e)?e.map((e=>e.bind(t.proxy))):e.bind(t.proxy),t,n)}function Xn(e,t,n,o){const r=o.includes(".")?cn(n,o):()=>n[o];if(E(e)){const n=t[e];k(n)&&rn(r,n)}else if(k(e))rn(r,e.bind(n));else if(F(e))if(x(e))e.forEach((e=>Xn(e,t,n,o)));else{const o=k(e.handler)?e.handler.bind(n):t[e.handler];k(o)&&rn(r,o,e)}}
/**
             * Resolve merged options and cache it on the component.
             * This is done only once per-component since the merging does not involve
             * instances.
             */function Zn(e){const t=e.type,{mixins:n,extends:o}=t,{mixins:r,optionsCache:s,config:{optionMergeStrategies:l}}=e.appContext,i=s.get(t);let c;return i?c=i:r.length||n||o?(c={},r.length&&r.forEach((e=>Qn(c,e,l,!0))),Qn(c,t,l)):c=t,F(t)&&s.set(t,c),c}function Qn(e,t,n,o=!1){const{mixins:r,extends:s}=t;s&&Qn(e,s,n,!0),r&&r.forEach((t=>Qn(e,t,n,!0)));for(const l in t)if(o&&"expose"===l);else{const o=Yn[l]||n&&n[l];e[l]=o?o(e[l],t[l]):t[l]}return e}const Yn={data:eo,props:oo,emits:oo,// objects
methods:oo,computed:oo,// lifecycle
beforeCreate:no,created:no,beforeMount:no,mounted:no,beforeUpdate:no,updated:no,beforeDestroy:no,beforeUnmount:no,destroyed:no,unmounted:no,activated:no,deactivated:no,errorCaptured:no,serverPrefetch:no,// assets
components:oo,directives:oo,// watch
watch:function(e,t){if(!e)return t;if(!t)return e;const n=_(Object.create(null),e);for(const o in t)n[o]=no(e[o],t[o]);return n},// provide / inject
provide:eo,inject:function(e,t){return oo(to(e),to(t))}};function eo(e,t){return t?e?function(){return _(k(e)?e.call(this,this):e,k(t)?t.call(this,this):t)}:t:e}function to(e){if(x(e)){const t={};for(let n=0;n<e.length;n++)t[e[n]]=e[n];return t}return e}function no(e,t){return e?[...new Set([].concat(e,t))]:t}function oo(e,t){return e?_(_(Object.create(null),e),t):t}function ro(e,t,n,// result of bitwise flag comparison
o=!1){const r={},s={};H(s,Ho,1),e.propsDefaults=Object.create(null),so(e,t,r,s);// ensure all declared prop keys are present
for(const l in e.propsOptions[0])l in r||(r[l]=void 0);n?// stateful
e.props=o?r:ot(r,!1,Oe,Je,Qe):e.type.props?// functional w/ declared props
e.props=r:// functional w/ optional props, props === attrs
e.props=s,e.attrs=s}function so(e,t,n,o){const[r,s]=e.propsOptions;let l,i=!1;if(t)for(let c in t){// key, ref are reserved and never passed down
if(j(c))continue;const a=t[c];// prop option names are camelized during normalization, so to support
// kebab -> camel conversion here we need to camelize the key.
let u;r&&C(r,u=V(c))?s&&s.includes(u)?(l||(l={}))[u]=a:n[u]=a:Kt(e.emitsOptions,c)||c in o&&a===o[c]||(o[c]=a,i=!0)}if(s){const t=ct(n),o=l||f;for(let l=0;l<s.length;l++){const i=s[l];n[i]=lo(r,t,i,o[i],e,!C(o,i))}}return i}function lo(e,t,n,o,r,s){const l=e[n];if(null!=l){const e=C(l,"default");// default values
if(e&&void 0===o){const e=l.default;if(l.type!==Function&&k(e)){const{propsDefaults:s}=r;n in s?o=s[n]:(lr(r),o=s[n]=e.call(null,t),ir())}else o=e}// boolean casting
l[0/* BooleanFlags.shouldCast */]&&(s&&!e?o=!1:!l[1/* BooleanFlags.shouldCastTrue */]||""!==o&&o!==U(n)||(o=!0))}return o}function io(e,t,n=!1){const o=t.propsCache,r=o.get(e);if(r)return r;const s=e.props,l={},i=[];// apply mixin/extends props
let c=!1;if(!k(e)){const o=e=>{c=!0;const[n,o]=io(e,t,!0);_(l,n),o&&i.push(...o)};!n&&t.mixins.length&&t.mixins.forEach(o),e.extends&&o(e.extends),e.mixins&&e.mixins.forEach(o)}if(!s&&!c)return F(e)&&o.set(e,p),p;if(x(s))for(let u=0;u<s.length;u++){const e=V(s[u]);co(e)&&(l[e]=f)}else if(s)for(const u in s){const e=V(u);if(co(e)){const t=s[u],n=l[e]=x(t)||k(t)?{type:t}:Object.assign({},t);if(n){const t=fo(Boolean,n.type),o=fo(String,n.type);n[0/* BooleanFlags.shouldCast */]=t>-1,n[1/* BooleanFlags.shouldCastTrue */]=o<0||t<o,// if the prop needs boolean casting or default value
(t>-1||C(n,"default"))&&i.push(e)}}}const a=[l,i];return F(e)&&o.set(e,a),a}function co(e){return"$"!==e[0]}// use function string name to check type constructors
// so that it works across vms / iframes.
function ao(e){const t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:null===e?"null":""}function uo(e,t){return ao(e)===ao(t)}function fo(e,t){return x(t)?t.findIndex((t=>uo(t,e))):k(t)&&uo(t,e)?0:-1}const po=e=>"_"===e[0]||"$stable"===e,ho=e=>x(e)?e.map(Qo):[Qo(e)],vo=(e,t,n)=>{if(t._n)// already normalized - #5353
return t;const o=Xt(((...e)=>ho(t(...e))),n);return o._c=!1,o},go=(e,t,n)=>{const o=e._ctx;for(const r in e){if(po(r))continue;const n=e[r];if(k(n))t[r]=vo(0,n,o);else if(null!=n){const e=ho(n);t[r]=()=>e}}},mo=(e,t)=>{const n=ho(t);e.slots.default=()=>n},_o=(e,t)=>{if(32/* ShapeFlags.SLOTS_CHILDREN */&e.vnode.shapeFlag){const n=t._;n?(// users can get the shallow readonly version of the slots object through `this.$slots`,
// we should avoid the proxy object polluting the slots of the internal instance
e.slots=ct(t),// make compiler marker non-enumerable
H(t,"_",n)):go(t,e.slots={})}else e.slots={},t&&mo(e,t);H(e.slots,Ho,1)},yo=(e,t,n)=>{const{vnode:o,slots:r}=e;let s=!0,l=f;if(32/* ShapeFlags.SLOTS_CHILDREN */&o.shapeFlag){const e=t._;e?// compiled slots.
n&&1/* SlotFlags.STABLE */===e?// compiled AND stable.
// no need to update, and skip stale slots removal.
s=!1:(// compiled but dynamic (v-if/v-for on slots) - update slots, but skip
// normalization.
_(r,t),// #2893
// when rendering the optimized slots by manually written render function,
// we need to delete the `slots._` flag if necessary to make subsequent updates reliable,
// i.e. let the `renderSlot` create the bailed Fragment
n||1/* SlotFlags.STABLE */!==e||delete r._):(s=!t.$stable,go(t,r)),l=t}else t&&(// non slot object children (direct value) passed to a component
mo(e,t),l={default:1});// delete stale slots
if(s)for(const i in r)po(i)||i in l||delete r[i]};function bo(){return{app:null,config:{isNativeTag:h,performance:!1,globalProperties:{},optionMergeStrategies:{},errorHandler:void 0,warnHandler:void 0,compilerOptions:{}},mixins:[],components:{},directives:{},provides:Object.create(null),optionsCache:new WeakMap,propsCache:new WeakMap,emitsCache:new WeakMap}}let Co=0;function xo(e,t){return function(n,o=null){k(n)||(n=Object.assign({},n)),null==o||F(o)||(o=null);const r=bo(),s=new Set;let l=!1;const i=r.app={_uid:Co++,_component:n,_props:o,_container:null,_context:r,_instance:null,version:yr,get config(){return r.config},set config(e){},use:(e,...t)=>(s.has(e)||(e&&k(e.install)?(s.add(e),e.install(i,...t)):k(e)&&(s.add(e),e(i,...t))),i),mixin:e=>(r.mixins.includes(e)||r.mixins.push(e),i),component:(e,t)=>t?(r.components[e]=t,i):r.components[e],directive:(e,t)=>t?(r.directives[e]=t,i):r.directives[e],mount(s,c,a){if(!l){const u=Jo(n,o);// store app context on the root VNode.
// this will be set on the root instance on initial mount.
return u.appContext=r,c&&t?t(u,s):e(u,s,a),l=!0,i._container=s,s.__vue_app__=i,hr(u.component)||u.component.proxy}},unmount(){l&&(e(null,i._container),delete i._container.__vue_app__)},provide:(e,t)=>(r.provides[e]=t,i)};return i}}
/**
             * Function for handling a template ref
             */function wo(e,t,n,o,r=!1){if(x(e))return void e.forEach(((e,s)=>wo(e,t&&(x(t)?t[s]:t),n,o,r)));if(yn(o)&&!r)// when mounting async components, nothing needs to be done,
// because the template ref is forwarded to inner component
return;const s=4/* ShapeFlags.STATEFUL_COMPONENT */&o.shapeFlag?hr(o.component)||o.component.proxy:o.el,l=r?null:s,{i:i,r:c}=e,a=t&&t.r,u=i.refs===f?i.refs={}:i.refs,p=i.setupState;if(// dynamic ref changed. unset old ref
null!=a&&a!==c&&(E(a)?(u[a]=null,C(p,a)&&(p[a]=null)):ht(a)&&(a.value=null)),k(c))St(c,i,12/* ErrorCodes.FUNCTION_REF */,[l,u]);else{const t=E(c),o=ht(c);if(t||o){const i=()=>{if(e.f){const n=t?C(p,c)?p[c]:u[c]:c.value;r?x(n)&&y(n,s):x(n)?n.includes(s)||n.push(s):t?(u[c]=[s],C(p,c)&&(p[c]=u[c])):(c.value=[s],e.k&&(u[e.k]=c.value))}else t?(u[c]=l,C(p,c)&&(p[c]=l)):o&&(c.value=l,e.k&&(u[e.k]=l))};l?(i.id=-1,So(i,n)):i()}}}const So=function(e,t){var n;t&&t.pendingBranch?x(e)?t.effects.push(...e):t.effects.push(e):(x(n=e)?// if cb is an array, it is a component lifecycle hook which can only be
// triggered by a job, which is already deduped in the main queue, so
// we can skip duplicate check here to improve perf
Lt.push(...n):$t&&$t.includes(n,n.allowRecurse?Mt+1:Mt)||Lt.push(n),Vt())};
/**
             * The createRenderer function accepts two generic arguments:
             * HostNode and HostElement, corresponding to Node and Element types in the
             * host environment. For example, for runtime-dom, HostNode would be the DOM
             * `Node` interface and HostElement would be the DOM `Element` interface.
             *
             * Custom renderers can pass in the platform specific types like this:
             *
             * ``` js
             * const { render, createApp } = createRenderer<Node, Element>({
             *   patchProp,
             *   ...nodeOps
             * })
             * ```
             */function ko(e){// implementation
return function(e,t){G().__VUE__=!0;const{insert:n,remove:o,patchProp:r,createElement:s,createText:l,createComment:i,setText:c,setElementText:a,parentNode:u,nextSibling:h,setScopeId:v=d,insertStaticContent:g}=e,m=(e,t,n,o=null,r=null,s=null,l=!1,i=null,c=!!t.dynamicChildren)=>{if(e===t)return;// patching & not same type, unmount old tree
e&&!zo(e,t)&&(o=Y(e),K(e,r,s,!0),e=null),-2/* PatchFlags.BAIL */===t.patchFlag&&(c=!1,t.dynamicChildren=null);const{type:a,ref:u,shapeFlag:f}=t;switch(a){case Mo:_(e,t,n,o);break;case Po:y(e,t,n,o);break;case jo:null==e&&b(t,n,o,l);break;case $o:$(e,t,n,o,r,s,l,i,c);break;default:1/* ShapeFlags.ELEMENT */&f?S(e,t,n,o,r,s,l,i,c):6/* ShapeFlags.COMPONENT */&f?M(e,t,n,o,r,s,l,i,c):(64/* ShapeFlags.TELEPORT */&f||128/* ShapeFlags.SUSPENSE */&f)&&a.process(e,t,n,o,r,s,l,i,c,te)}// set ref
null!=u&&r&&wo(u,e&&e.ref,s,t||e,!t)},_=(e,t,o,r)=>{if(null==e)n(t.el=l(t.children),o,r);else{const n=t.el=e.el;t.children!==e.children&&c(n,t.children)}},y=(e,t,o,r)=>{null==e?n(t.el=i(t.children||""),o,r):// there's no support for dynamic comments
t.el=e.el},b=(e,t,n,o)=>{[e.el,e.anchor]=g(e.children,t,n,o,e.el,e.anchor)},x=({el:e,anchor:t},o,r)=>{let s;for(;e&&e!==t;)s=h(e),n(e,o,r),e=s;n(t,o,r)},w=({el:e,anchor:t})=>{let n;for(;e&&e!==t;)n=h(e),o(e),e=n;o(t)},S=(e,t,n,o,r,s,l,i,c)=>{l=l||"svg"===t.type,null==e?k(t,n,o,r,s,l,i,c):F(e,t,r,s,l,i,c)},k=(e,t,o,l,i,c,u,f)=>{let p,d;const{type:h,props:v,shapeFlag:g,transition:m,dirs:_}=e;// props
if(p=e.el=s(e.type,c,v&&v.is,v),// mount children first, since some props may rely on child content
// being already rendered, e.g. `<select value>`
8/* ShapeFlags.TEXT_CHILDREN */&g?a(p,e.children):16/* ShapeFlags.ARRAY_CHILDREN */&g&&A(e.children,p,null,l,i,c&&"foreignObject"!==h,u,f),_&&Nn(e,null,l,"created"),v){for(const t in v)"value"===t||j(t)||r(p,t,null,v[t],c,e.children,l,i,Q);
/**
                         * Special case for setting value on DOM elements:
                         * - it can be order-sensitive (e.g. should be set *after* min/max, #2325, #4024)
                         * - it needs to be forced (#1471)
                         * #2353 proposes adding another renderer option to configure this, but
                         * the properties affects are so finite it is worth special casing it
                         * here to reduce the complexity. (Special casing it also should not
                         * affect non-DOM renderers)
                         */"value"in v&&r(p,"value",null,v.value),(d=v.onVnodeBeforeMount)&&tr(d,l,e)}// scopeId
E(p,e,e.scopeId,u,l),_&&Nn(e,null,l,"beforeMount");// #1583 For inside suspense + suspense not resolved case, enter hook should call when suspense resolved
// #1689 For inside suspense + suspense resolved case, just call it
const y=(!i||i&&!i.pendingBranch)&&m&&!m.persisted;y&&m.beforeEnter(p),n(p,t,o),((d=v&&v.onVnodeMounted)||y||_)&&So((()=>{d&&tr(d,l,e),y&&m.enter(p),_&&Nn(e,null,l,"mounted")}),i)},E=(e,t,n,o,r)=>{if(n&&v(e,n),o)for(let s=0;s<o.length;s++)v(e,o[s]);if(r&&t===r.subTree){const t=r.vnode;E(e,t,t.scopeId,t.slotScopeIds,r.parent)}},A=(e,t,n,o,r,s,l,i,c=0)=>{for(let a=c;a<e.length;a++){const c=e[a]=i?Yo(e[a]):Qo(e[a]);m(null,c,t,n,o,r,s,l,i)}},F=(e,t,n,o,s,l,i)=>{const c=t.el=e.el;let{patchFlag:u,dynamicChildren:p,dirs:d}=t;// #1426 take the old vnode's patch flag into account since user may clone a
// compiler-generated vnode, which de-opts to FULL_PROPS
u|=16/* PatchFlags.FULL_PROPS */&e.patchFlag;const h=e.props||f,v=t.props||f;let g;// disable recurse in beforeUpdate hooks
n&&Eo(n,!1),(g=v.onVnodeBeforeUpdate)&&tr(g,n,t,e),d&&Nn(t,e,n,"beforeUpdate"),n&&Eo(n,!0);const m=s&&"foreignObject"!==t.type;if(p?T(e.dynamicChildren,p,c,n,o,m,l):i||// full diff
B(e,t,c,null,n,o,m,l,!1),u>0){// the presence of a patchFlag means this element's render code was
// generated by the compiler and can take the fast path.
// in this path old node and new node are guaranteed to have the same shape
// (i.e. at the exact same position in the source template)
if(16/* PatchFlags.FULL_PROPS */&u)// element props contain dynamic keys, full diff needed
L(c,t,h,v,n,o,s);else// props
// This flag is matched when the element has dynamic prop/attr bindings
// other than class and style. The keys of dynamic prop/attrs are saved for
// faster iteration.
// Note dynamic keys like :[foo]="bar" will cause this optimization to
// bail out and go through a full diff because we need to unset the old key
if(// class
// this flag is matched when the element has dynamic class bindings.
2/* PatchFlags.CLASS */&u&&h.class!==v.class&&r(c,"class",null,v.class,s),// style
// this flag is matched when the element has dynamic style bindings
4/* PatchFlags.STYLE */&u&&r(c,"style",h.style,v.style,s),8/* PatchFlags.PROPS */&u){// if the flag is present then dynamicProps must be non-null
const l=t.dynamicProps;for(let t=0;t<l.length;t++){const i=l[t],a=h[i],u=v[i];// #1471 force patch value
u===a&&"value"!==i||r(c,i,a,u,s,e.children,n,o,Q)}}// text
// This flag is matched when the element has only dynamic text children.
1/* PatchFlags.TEXT */&u&&e.children!==t.children&&a(c,t.children)}else i||null!=p||// unoptimized, full diff
L(c,t,h,v,n,o,s);((g=v.onVnodeUpdated)||d)&&So((()=>{g&&tr(g,n,t,e),d&&Nn(t,e,n,"updated")}),o)},T=(e,t,n,o,r,s,l)=>{for(let i=0;i<t.length;i++){const c=e[i],a=t[i],f=// oldVNode may be an errored async setup() component inside Suspense
// which will not have a mounted element
c.el&&(// - In the case of a Fragment, we need to provide the actual parent
// of the Fragment itself so it can move its children.
c.type===$o||// - In the case of different nodes, there is going to be a replacement
// which also requires the correct parent container
!zo(c,a)||// - In the case of a component, it could contain anything.
70/* ShapeFlags.TELEPORT */&c.shapeFlag)?u(c.el):// In other cases, the parent container is not actually used so we
// just pass the block element here to avoid a DOM parentNode call.
n;m(c,a,f,null,o,r,s,l,!0)}},L=(e,t,n,o,s,l,i)=>{if(n!==o){if(n!==f)for(const c in n)j(c)||c in o||r(e,c,n[c],null,i,t.children,s,l,Q);for(const c in o){// empty string is not valid prop
if(j(c))continue;const a=o[c],u=n[c];// defer patching value
a!==u&&"value"!==c&&r(e,c,u,a,i,t.children,s,l,Q)}"value"in o&&r(e,"value",n.value,o.value)}},$=(e,t,o,r,s,i,c,a,u)=>{const f=t.el=e?e.el:l(""),p=t.anchor=e?e.anchor:l("");let{patchFlag:d,dynamicChildren:h,slotScopeIds:v}=t;// check if this is a slot fragment with :slotted scope ids
v&&(a=a?a.concat(v):v),null==e?(n(f,o,r),n(p,o,r),// a fragment can only have array children
// since they are either generated by the compiler, or implicitly created
// from arrays.
A(t.children,o,p,s,i,c,a,u)):d>0&&64/* PatchFlags.STABLE_FRAGMENT */&d&&h&&// #2715 the previous fragment could've been a BAILed one as a result
// of renderSlot() with no valid children
e.dynamicChildren?(// a stable fragment (template root or <template v-for>) doesn't need to
// patch children order, but it may contain dynamicChildren.
T(e.dynamicChildren,h,o,s,i,c,a),(// #2080 if the stable fragment has a key, it's a <template v-for> that may
//  get moved around. Make sure all root level vnodes inherit el.
// #2134 or if it's a component root, it may also get moved around
// as the component is being moved.
null!=t.key||s&&t===s.subTree)&&Ao(e,t,!0/* shallow */)):// keyed / unkeyed, or manual fragments.
// for keyed & unkeyed, since they are compiler generated from v-for,
// each child is guaranteed to be a block so the fragment will never
// have dynamicChildren.
B(e,t,o,p,s,i,c,a,u)},M=(e,t,n,o,r,s,l,i,c)=>{t.slotScopeIds=i,null==e?512/* ShapeFlags.COMPONENT_KEPT_ALIVE */&t.shapeFlag?r.ctx.activate(t,n,o,l,c):P(t,n,o,r,s,l,c):R(e,t,c)},P=(e,t,n,o,r,s,l)=>{const i=e.component=function(e,t,n){const o=e.type,r=(t?t.appContext:e.appContext)||nr,s={uid:or++,vnode:e,type:o,parent:t,appContext:r,root:null,next:null,subTree:null,effect:null,update:null,scope:new X(!0/* detached */),render:null,proxy:null,exposed:null,exposeProxy:null,withProxy:null,provides:t?t.provides:Object.create(r.provides),accessCache:null,renderCache:[],// local resolved assets
components:null,directives:null,// resolved props and emits options
propsOptions:io(o,r),emitsOptions:Ht(o,r),// emit
emit:null,emitted:null,// props default value
propsDefaults:f,// inheritAttrs
inheritAttrs:o.inheritAttrs,// state
ctx:f,data:f,props:f,attrs:f,slots:f,refs:f,setupState:f,setupContext:null,// suspense related
suspense:n,suspenseId:n?n.pendingId:0,asyncDep:null,asyncResolved:!1,// lifecycle hooks
// not using enums here because it results in computed properties
isMounted:!1,isUnmounted:!1,isDeactivated:!1,bc:null,c:null,bm:null,m:null,bu:null,u:null,um:null,bum:null,da:null,a:null,rtg:null,rtc:null,ec:null,sp:null};// inherit parent app context - or - if root, adopt from root vnode
return s.ctx={_:s},s.root=t?t.root:s,s.emit=zt.bind(null,s),// apply custom element special handling
e.ce&&e.ce(s),s}(e,o,r);// inject renderer internals for keepAlive
// setup() is async. This component relies on async logic to be resolved
// before proceeding
if(bn(e)&&(i.ctx.renderer=te),function(e,t=!1){ur=t;const{props:n,children:o}=e.vnode,r=cr(e);ro(e,n,r,t),_o(e,o);r&&function(e,t){const n=e.type;// 0. create render proxy property access cache
e.accessCache=Object.create(null),// 1. create public instance / render proxy
// also mark it raw so it's never observed
e.proxy=at(new Proxy(e.ctx,Kn));// 2. call setup()
const{setup:o}=n;if(o){const n=e.setupContext=o.length>1?dr(e):null;lr(e),fe();const r=St(o,e,0/* ErrorCodes.SETUP_FUNCTION */,[e.props,n]);if(pe(),ir(),O(r)){if(r.then(ir,ir),t)// return the promise so server-renderer can wait on it
return r.then((n=>{fr(e,n,t)})).catch((t=>{Et(t,e,0/* ErrorCodes.SETUP_FUNCTION */)}));// async setup returned Promise.
// bail here and wait for re-entry.
e.asyncDep=r}else fr(e,r,t)}else pr(e,t)}(e,t);ur=!1}(i),i.asyncDep){// Give it a placeholder if this is not hydration
// TODO handle self-defined fallback
if(r&&r.registerDep(i,N),!e.el){const e=i.subTree=Jo(Po);y(null,e,t,n)}}else N(i,e,t,n,r,s,l)},R=(e,t,n)=>{const o=t.component=e.component;if(function(e,t,n){const{props:o,children:r,component:s}=e,{props:l,children:i,patchFlag:c}=t,a=s.emitsOptions;// force child update for runtime directive or transition on component vnode.
if(t.dirs||t.transition)return!0;if(!(n&&c>=0))// this path is only taken by manually written render functions
// so presence of any children leads to a forced update
return!(!r&&!i||i&&i.$stable)||o!==l&&(o?!l||en(o,l,a):!!l);if(1024/* PatchFlags.DYNAMIC_SLOTS */&c)// slot content that references values that might have changed,
// e.g. in a v-for
return!0;if(16/* PatchFlags.FULL_PROPS */&c)return o?en(o,l,a):!!l;// presence of this flag indicates props are always non-null
if(8/* PatchFlags.PROPS */&c){const e=t.dynamicProps;for(let t=0;t<e.length;t++){const n=e[t];if(l[n]!==o[n]&&!Kt(a,n))return!0}}return!1}(e,t,n)){if(o.asyncDep&&!o.asyncResolved)return void I(o,t,n);// normal update
o.next=t,// in case the child component is also queued, remove it to avoid
// double updating the same child component in the same flush.
function(e){const t=Ot.indexOf(e);t>Tt&&Ot.splice(t,1)}(o.update),// instance.update is the reactive effect.
o.update()}else// no update needed. just copy over properties
t.el=e.el,o.vnode=t},N=(e,t,n,o,r,s,l)=>{const i=()=>{if(e.isMounted){// updateComponent
// This is triggered by mutation of component's own state (next: null)
// OR parent calling processComponent (next: VNode)
let t,{next:n,bu:o,u:i,parent:c,vnode:a}=e,f=n;// Disallow component effect recursion during pre-lifecycle hooks.
Eo(e,!1),n?(n.el=a.el,I(e,n,l)):n=a,// beforeUpdate hook
o&&z(o),// onVnodeBeforeUpdate
(t=n.props&&n.props.onVnodeBeforeUpdate)&&tr(t,c,n,a),Eo(e,!0);const p=Zt(e),d=e.subTree;e.subTree=p,m(d,p,// parent may have changed if it's in a teleport
u(d.el),// anchor may have changed if it's in a fragment
Y(d),e,r,s),n.el=p.el,null===f&&// self-triggered update. In case of HOC, update parent component
// vnode el. HOC is indicated by parent instance's subTree pointing
// to child component's vnode
function({vnode:e,parent:t},n){for(;t&&t.subTree===e;)(e=t.vnode).el=n,t=t.parent}(e,p.el),// updated hook
i&&So(i,r),// onVnodeUpdated
(t=n.props&&n.props.onVnodeUpdated)&&So((()=>tr(t,c,n,a)),r)}else{let l;const{el:i,props:c}=t,{bm:a,m:u,parent:f}=e,p=yn(t);if(Eo(e,!1),// beforeMount hook
a&&z(a),// onVnodeBeforeMount
!p&&(l=c&&c.onVnodeBeforeMount)&&tr(l,f,t),Eo(e,!0),i&&oe){// vnode has adopted host node - perform hydration instead of mount.
const n=()=>{e.subTree=Zt(e),oe(i,e.subTree,e,r,null)};p?t.type.__asyncLoader().then((// note: we are moving the render call into an async callback,
// which means it won't track dependencies - but it's ok because
// a server-rendered async wrapper is already in resolved state
// and it will never need to change.
()=>!e.isUnmounted&&n())):n()}else{const l=e.subTree=Zt(e);m(null,l,n,o,e,r,s),t.el=l.el}// mounted hook
// onVnodeMounted
if(u&&So(u,r),!p&&(l=c&&c.onVnodeMounted)){const e=t;So((()=>tr(l,f,e)),r)}// activated hook for keep-alive roots.
// #1742 activated hook must be accessed after first render
// since the hook may be injected by a child keep-alive
(256/* ShapeFlags.COMPONENT_SHOULD_KEEP_ALIVE */&t.shapeFlag||f&&yn(f.vnode)&&256/* ShapeFlags.COMPONENT_SHOULD_KEEP_ALIVE */&f.vnode.shapeFlag)&&e.a&&So(e.a,r),e.isMounted=!0,// #2458: deference mount-only object parameters to prevent memleaks
t=n=o=null}},c=e.effect=new ie(i,(()=>Nt(a)),e.scope),a=e.update=()=>c.run();// create reactive effect for rendering
a.id=e.uid,// allowRecurse
// #1801, #2043 component render effects should allow recursive updates
Eo(e,!0),a()},I=(e,t,n)=>{t.component=e;const o=e.vnode.props;e.vnode=t,e.next=null,function(e,t,n,o){const{props:r,attrs:s,vnode:{patchFlag:l}}=e,i=ct(r),[c]=e.propsOptions;let a=!1;if(// always force full diff in dev
// - #1942 if hmr is enabled with sfc component
// - vite#872 non-sfc component used by sfc component
!(o||l>0)||16/* PatchFlags.FULL_PROPS */&l){// in case of dynamic props, check if we need to delete keys from
// the props object
let o;// full props update.
so(e,t,r,s)&&(a=!0);for(const s in i)t&&(// for camelCase
C(t,s)||// it's possible the original props was passed in as kebab-case
// and converted to camelCase (#955)
(o=U(s))!==s&&C(t,o))||(c?!n||// for camelCase
void 0===n[s]&&// for kebab-case
void 0===n[o]||(r[s]=lo(c,i,s,void 0,e,!0/* isAbsent */)):delete r[s]);// in the case of functional component w/o props declaration, props and
// attrs point to the same object so it should already have been updated.
if(s!==i)for(const e in s)t&&C(t,e)||(delete s[e],a=!0)}// trigger updates for $attrs in case it's used in component slots
else if(8/* PatchFlags.PROPS */&l){// Compiler-generated props & no keys change, just set the updated
// the props.
const n=e.vnode.dynamicProps;for(let o=0;o<n.length;o++){let l=n[o];// skip if the prop key is a declared emit event listener
if(Kt(e.emitsOptions,l))continue;// PROPS flag guarantees rawProps to be non-null
const u=t[l];if(c)// attr / props separation was done on init and will be consistent
// in this code path, so just check if attrs have it.
if(C(s,l))u!==s[l]&&(s[l]=u,a=!0);else{const t=V(l);r[t]=lo(c,i,t,u,e,!1/* isAbsent */)}else u!==s[l]&&(s[l]=u,a=!0)}}a&&ve(e,"set"/* TriggerOpTypes.SET */,"$attrs")}(e,t.props,o,n),yo(e,t.children,n),fe(),// props update may have triggered pre-flush watchers.
// flush them before the render update.
It(),pe()},B=(e,t,n,o,r,s,l,i,c=!1)=>{const u=e&&e.children,f=e?e.shapeFlag:0,p=t.children,{patchFlag:d,shapeFlag:h}=t;// fast path
if(d>0){if(128/* PatchFlags.KEYED_FRAGMENT */&d)// this could be either fully-keyed or mixed (some keyed some not)
// presence of patchFlag means children are guaranteed to be arrays
return void W(u,p,n,o,r,s,l,i,c);if(256/* PatchFlags.UNKEYED_FRAGMENT */&d)// unkeyed
return void D(u,p,n,o,r,s,l,i,c)}// children has 3 possibilities: text, array or no children.
8/* ShapeFlags.TEXT_CHILDREN */&h?(// text children fast path
16/* ShapeFlags.ARRAY_CHILDREN */&f&&Q(u,r,s),p!==u&&a(n,p)):16/* ShapeFlags.ARRAY_CHILDREN */&f?// prev children was array
16/* ShapeFlags.ARRAY_CHILDREN */&h?// two arrays, cannot assume anything, do full diff
W(u,p,n,o,r,s,l,i,c):// no new children, just unmount old
Q(u,r,s,!0):(// prev children was text OR null
// new children is array OR null
8/* ShapeFlags.TEXT_CHILDREN */&f&&a(n,""),// mount new if array
16/* ShapeFlags.ARRAY_CHILDREN */&h&&A(p,n,o,r,s,l,i,c))},D=(e,t,n,o,r,s,l,i,c)=>{t=t||p;const a=(e=e||p).length,u=t.length,f=Math.min(a,u);let d;for(d=0;d<f;d++){const o=t[d]=c?Yo(t[d]):Qo(t[d]);m(e[d],o,n,null,r,s,l,i,c)}a>u?// remove old
Q(e,r,s,!0,!1,f):// mount new
A(t,n,o,r,s,l,i,c,f)},W=(e,t,n,o,r,s,l,i,c)=>{let a=0;const u=t.length;let f=e.length-1,d=u-1;// prev ending index
// next ending index
// 1. sync from start
// (a b) c
// (a b) d e
for(;a<=f&&a<=d;){const o=e[a],u=t[a]=c?Yo(t[a]):Qo(t[a]);if(!zo(o,u))break;m(o,u,n,null,r,s,l,i,c),a++}// 2. sync from end
// a (b c)
// d e (b c)
for(;a<=f&&a<=d;){const o=e[f],a=t[d]=c?Yo(t[d]):Qo(t[d]);if(!zo(o,a))break;m(o,a,n,null,r,s,l,i,c),f--,d--}// 3. common sequence + mount
// (a b)
// (a b) c
// i = 2, e1 = 1, e2 = 2
// (a b)
// c (a b)
// i = 0, e1 = -1, e2 = 0
if(a>f){if(a<=d){const e=d+1,f=e<u?t[e].el:o;for(;a<=d;)m(null,t[a]=c?Yo(t[a]):Qo(t[a]),n,f,r,s,l,i,c),a++}}else if(a>d)for(;a<=f;)K(e[a],r,s,!0),a++;else{const h=a,v=a,g=new Map;// prev starting index
for(a=v;a<=d;a++){const e=t[a]=c?Yo(t[a]):Qo(t[a]);null!=e.key&&g.set(e.key,a)}// 5.2 loop through old children left to be patched and try to patch
// matching nodes & remove nodes that are no longer present
let _,y=0;const b=d-v+1;let C=!1,x=0;// used to track whether any node has moved
// works as Map<newIndex, oldIndex>
// Note that oldIndex is offset by +1
// and oldIndex = 0 is a special value indicating the new node has
// no corresponding old node.
// used for determining longest stable subsequence
const w=new Array(b);for(a=0;a<b;a++)w[a]=0;for(a=h;a<=f;a++){const o=e[a];if(y>=b){// all new children have been patched so this can only be a removal
K(o,r,s,!0);continue}let u;if(null!=o.key)u=g.get(o.key);else// key-less node, try to locate a key-less node of the same type
for(_=v;_<=d;_++)if(0===w[_-v]&&zo(o,t[_])){u=_;break}void 0===u?K(o,r,s,!0):(w[u-v]=a+1,u>=x?x=u:C=!0,m(o,t[u],n,null,r,s,l,i,c),y++)}// 5.3 move and mount
// generate longest stable subsequence only when nodes have moved
const S=C?// https://en.wikipedia.org/wiki/Longest_increasing_subsequence
function(e){const t=e.slice(),n=[0];let o,r,s,l,i;const c=e.length;for(o=0;o<c;o++){const c=e[o];if(0!==c){if(r=n[n.length-1],e[r]<c){t[o]=r,n.push(o);continue}for(s=0,l=n.length-1;s<l;)i=s+l>>1,e[n[i]]<c?s=i+1:l=i;c<e[n[s]]&&(s>0&&(t[o]=n[s-1]),n[s]=o)}}for(s=n.length,l=n[s-1];s-- >0;)n[s]=l,l=t[l];return n}(w):p;// looping backwards so that we can use last patched node as anchor
for(_=S.length-1,a=b-1;a>=0;a--){const e=v+a,f=t[e],p=e+1<u?t[e+1].el:o;0===w[a]?// mount new
m(null,f,n,p,r,s,l,i,c):C&&(// move if:
// There is no stable subsequence (e.g. a reverse)
// OR current node is not among the stable sequence
_<0||a!==S[_]?H(f,n,p,2/* MoveType.REORDER */):_--)}}},H=(e,t,o,r,s=null)=>{const{el:l,type:i,transition:c,children:a,shapeFlag:u}=e;if(6/* ShapeFlags.COMPONENT */&u)H(e.component.subTree,t,o,r);else if(128/* ShapeFlags.SUSPENSE */&u)e.suspense.move(t,o,r);else if(64/* ShapeFlags.TELEPORT */&u)i.move(e,t,o,te);else if(i!==$o)if(i!==jo)if(2/* MoveType.REORDER */!==r&&1/* ShapeFlags.ELEMENT */&u&&c)if(0/* MoveType.ENTER */===r)c.beforeEnter(l),n(l,t,o),So((()=>c.enter(l)),s);else{const{leave:e,delayLeave:r,afterLeave:s}=c,i=()=>n(l,t,o),a=()=>{e(l,(()=>{i(),s&&s()}))};r?r(l,i,a):a()}else n(l,t,o);else x(e,t,o);// single nodes
else{n(l,t,o);for(let e=0;e<a.length;e++)H(a[e],t,o,r);n(e.anchor,t,o)}},K=(e,t,n,o=!1,r=!1)=>{const{type:s,props:l,ref:i,children:c,dynamicChildren:a,shapeFlag:u,patchFlag:f,dirs:p}=e;// unset ref
if(null!=i&&wo(i,null,n,e,!0),256/* ShapeFlags.COMPONENT_SHOULD_KEEP_ALIVE */&u)return void t.ctx.deactivate(e);const d=1/* ShapeFlags.ELEMENT */&u&&p,h=!yn(e);let v;if(h&&(v=l&&l.onVnodeBeforeUnmount)&&tr(v,t,e),6/* ShapeFlags.COMPONENT */&u)Z(e.component,n,o);else{if(128/* ShapeFlags.SUSPENSE */&u)return void e.suspense.unmount(n,o);d&&Nn(e,null,t,"beforeUnmount"),64/* ShapeFlags.TELEPORT */&u?e.type.remove(e,t,n,r,te,o):a&&(// #1153: fast path should not be taken for non-stable (v-for) fragments
s!==$o||f>0&&64/* PatchFlags.STABLE_FRAGMENT */&f)?// fast path for block nodes: only need to unmount dynamic children.
Q(a,t,n,!1,!0):(s===$o&&384/* PatchFlags.UNKEYED_FRAGMENT */&f||!r&&16/* ShapeFlags.ARRAY_CHILDREN */&u)&&Q(c,t,n),o&&q(e)}(h&&(v=l&&l.onVnodeUnmounted)||d)&&So((()=>{v&&tr(v,t,e),d&&Nn(e,null,t,"unmounted")}),n)},q=e=>{const{type:t,el:n,anchor:r,transition:s}=e;if(t===$o)return void J(n,r);if(t===jo)return void w(e);const l=()=>{o(n),s&&!s.persisted&&s.afterLeave&&s.afterLeave()};if(1/* ShapeFlags.ELEMENT */&e.shapeFlag&&s&&!s.persisted){const{leave:t,delayLeave:o}=s,r=()=>t(n,l);o?o(e.el,l,r):r()}else l()},J=(e,t)=>{// For fragments, directly remove all contained DOM nodes.
// (fragment child nodes cannot have transition)
let n;for(;e!==t;)n=h(e),o(e),e=n;o(t)},Z=(e,t,n)=>{const{bum:o,scope:r,update:s,subTree:l,um:i}=e;// beforeUnmount hook
o&&z(o),// stop effects in component scope
r.stop(),// update may be null if a component is unmounted before its async
// setup has resolved.
s&&(// so that scheduler will no longer invoke it
s.active=!1,K(l,e,t,n)),// unmounted hook
i&&So(i,t),So((()=>{e.isUnmounted=!0}),t),// A component with async dep inside a pending suspense is unmounted before
// its async dep resolves. This should remove the dep from the suspense, and
// cause the suspense to resolve immediately if that was the last dep.
t&&t.pendingBranch&&!t.isUnmounted&&e.asyncDep&&!e.asyncResolved&&e.suspenseId===t.pendingId&&(t.deps--,0===t.deps&&t.resolve())},Q=(e,t,n,o=!1,r=!1,s=0)=>{for(let l=s;l<e.length;l++)K(e[l],t,n,o,r)},Y=e=>6/* ShapeFlags.COMPONENT */&e.shapeFlag?Y(e.component.subTree):128/* ShapeFlags.SUSPENSE */&e.shapeFlag?e.suspense.next():h(e.anchor||e.el),ee=(e,t,n)=>{null==e?t._vnode&&K(t._vnode,null,null,!0):m(t._vnode||null,e,t,null,null,null,n),It(),Ut(),t._vnode=e},te={p:m,um:K,m:H,r:q,mt:P,mc:A,pc:B,pbc:T,n:Y,o:e};// Note: functions inside this closure should use `const xxx = () => {}`
// style in order to prevent being inlined by minifiers.
let ne,oe;return t&&([ne,oe]=t(te)),{render:ee,hydrate:ne,createApp:xo(ee,ne)}}(e)}function Eo({effect:e,update:t},n){e.allowRecurse=t.allowRecurse=n}
/**
             * #1156
             * When a component is HMR-enabled, we need to make sure that all static nodes
             * inside a block also inherit the DOM element from the previous tree so that
             * HMR updates (which are full updates) can retrieve the element for patching.
             *
             * #2080
             * Inside keyed `template` fragment static children, if a fragment is moved,
             * the children will always be moved. Therefore, in order to ensure correct move
             * position, el should be inherited from previous nodes.
             */function Ao(e,t,n=!1){const o=e.children,r=t.children;if(x(o)&&x(r))for(let s=0;s<o.length;s++){// this is only called in the optimized path so array children are
// guaranteed to be vnodes
const e=o[s];let t=r[s];1/* ShapeFlags.ELEMENT */&t.shapeFlag&&!t.dynamicChildren&&((t.patchFlag<=0||32/* PatchFlags.HYDRATE_EVENTS */===t.patchFlag)&&(t=r[s]=Yo(r[s]),t.el=e.el),n||Ao(e,t))}}const Fo=e=>e&&(e.disabled||""===e.disabled),Oo=e=>"undefined"!=typeof SVGElement&&e instanceof SVGElement,To=(e,t)=>{const n=e&&e.to;return E(n)?t?t(n):null:n};function Lo(e,t,n,{o:{insert:o},m:r},s=2/* TeleportMoveTypes.REORDER */){// move target anchor if this is a target change.
0/* TeleportMoveTypes.TARGET_CHANGE */===s&&o(e.targetAnchor,t,n);const{el:l,anchor:i,shapeFlag:c,children:a,props:u}=e,f=2/* TeleportMoveTypes.REORDER */===s;// if this is a re-order and teleport is enabled (content is in target)
// do not move children. So the opposite is: only move children if this
// is not a reorder, or the teleport is disabled
if(// move main view anchor if this is a re-order.
f&&o(l,t,n),(!f||Fo(u))&&16/* ShapeFlags.ARRAY_CHILDREN */&c)for(let p=0;p<a.length;p++)r(a[p],t,n,2/* MoveType.REORDER */);// move main view anchor if this is a re-order.
f&&o(i,t,n)}e("D",{__isTeleport:!0,process(e,t,n,o,r,s,l,i,c,a){const{mc:u,pc:f,pbc:p,o:{insert:d,querySelector:h,createText:v,createComment:g}}=a,m=Fo(t.props);let{shapeFlag:_,children:y,dynamicChildren:b}=t;if(null==e){// insert anchors in the main view
const e=t.el=v(""),a=t.anchor=v("");d(e,n,o),d(a,n,o);const f=t.target=To(t.props,h),p=t.targetAnchor=v("");f&&(d(p,f),// #2652 we could be teleporting from a non-SVG tree into an SVG tree
l=l||Oo(f));const g=(e,t)=>{// Teleport *always* has Array children. This is enforced in both the
// compiler and vnode children normalization.
16/* ShapeFlags.ARRAY_CHILDREN */&_&&u(y,e,t,r,s,l,i,c)};m?g(n,a):f&&g(f,p)}else{// update content
t.el=e.el;const o=t.anchor=e.anchor,u=t.target=e.target,d=t.targetAnchor=e.targetAnchor,v=Fo(e.props),g=v?n:u,_=v?o:d;if(l=l||Oo(u),b?(// fast path when the teleport happens to be a block root
p(e.dynamicChildren,b,g,r,s,l,i),// even in block tree mode we need to make sure all root-level nodes
// in the teleport inherit previous DOM references so that they can
// be moved in future patches.
Ao(e,t,!0)):c||f(e,t,g,_,r,s,l,i,!1),m)v||// enabled -> disabled
// move into main container
Lo(t,n,o,a,1/* TeleportMoveTypes.TOGGLE */);else// target changed
if((t.props&&t.props.to)!==(e.props&&e.props.to)){const e=t.target=To(t.props,h);e&&Lo(t,e,null,a,0/* TeleportMoveTypes.TARGET_CHANGE */)}else v&&// disabled -> enabled
// move into teleport target
Lo(t,u,d,a,1/* TeleportMoveTypes.TOGGLE */)}},remove(e,t,n,o,{um:r,o:{remove:s}},l){const{shapeFlag:i,children:c,anchor:a,targetAnchor:u,target:f,props:p}=e;// an unmounted teleport should always remove its children if not disabled
if(f&&s(u),(l||!Fo(p))&&(s(a),16/* ShapeFlags.ARRAY_CHILDREN */&i))for(let d=0;d<c.length;d++){const e=c[d];r(e,t,n,!0,!!e.dynamicChildren)}},move:Lo,hydrate:function(e,t,n,o,r,s,{o:{nextSibling:l,parentNode:i,querySelector:c}},a){const u=t.target=To(t.props,c);if(u){// if multiple teleports rendered to the same target element, we need to
// pick up from where the last teleport finished instead of the first node
const c=u._lpa||u.firstChild;if(16/* ShapeFlags.ARRAY_CHILDREN */&t.shapeFlag)if(Fo(t.props))t.anchor=a(l(e),t,i(e),n,o,r,s),t.targetAnchor=c;else{t.anchor=l(e);// lookahead until we find the target anchor
// we cannot rely on return value of hydrateChildren() because there
// could be nested teleports
let i=c;for(;i;)if(i=l(i),i&&8===i.nodeType&&"teleport anchor"===i.data){t.targetAnchor=i,u._lpa=t.targetAnchor&&l(t.targetAnchor);break}a(c,t,u,n,o,r,s)}}return t.anchor&&l(t.anchor)}// Force-casted public typing for h and TSX props inference
});const $o=e("F",Symbol(void 0)),Mo=e("T",Symbol(void 0)),Po=e("C",Symbol(void 0)),jo=Symbol(void 0),Ro=[];let No=null;
/**
             * Open a block.
             * This must be called before `createBlock`. It cannot be part of `createBlock`
             * because the children of the block are evaluated before `createBlock` itself
             * is called. The generated code typically looks like this:
             *
             * ```js
             * function render() {
             *   return (openBlock(),createBlock('div', null, [...]))
             * }
             * ```
             * disableTracking is true when creating a v-for fragment block, since a v-for
             * fragment always diffs its children.
             *
             * @private
             */function Vo(e=!1){Ro.push(No=e?null:[])}// Whether we should be tracking dynamic child nodes inside a block.
// Only tracks when this value is > 0
// We are not using a simple boolean because this value may need to be
// incremented/decremented by nested usage of v-once (see below)
let Io=1;
/**
             * Block tracking sometimes needs to be disabled, for example during the
             * creation of a tree that needs to be cached by v-once. The compiler generates
             * code like this:
             *
             * ``` js
             * _cache[1] || (
             *   setBlockTracking(-1),
             *   _cache[1] = createVNode(...),
             *   setBlockTracking(1),
             *   _cache[1]
             * )
             * ```
             *
             * @private
             */function Uo(e){Io+=e}function Bo(e){// save current block children on the block vnode
return e.dynamicChildren=Io>0?No||p:null,Ro.pop(),No=Ro[Ro.length-1]||null,// a block is always going to be patched, so track it as a child of its
// parent block
Io>0&&No&&No.push(e),e}function Do(e,t,n,o,r){return Bo(Jo(e,t,n,o,r,!0/* isBlock: prevent a block from tracking itself */))}function Wo(e){return!!e&&!0===e.__v_isVNode}function zo(e,t){return e.type===t.type&&e.key===t.key}const Ho="__vInternal",Ko=({key:e})=>null!=e?e:null,qo=({ref:e,ref_key:t,ref_for:n})=>null!=e?E(e)||ht(e)||k(e)?{i:qt,r:e,k:t,f:!!n}:e:null;function Go(e,t=null,n=null,o=0,r=null,s=(e===$o?0:1/* ShapeFlags.ELEMENT */),l=!1,i=!1){const c={__v_isVNode:!0,__v_skip:!0,type:e,props:t,key:t&&Ko(t),ref:t&&qo(t),scopeId:Gt,slotScopeIds:null,children:n,component:null,suspense:null,ssContent:null,ssFallback:null,dirs:null,transition:null,el:null,anchor:null,target:null,targetAnchor:null,staticCount:0,shapeFlag:s,patchFlag:o,dynamicProps:r,dynamicChildren:null,appContext:null};return i?(er(c,n),// normalize suspense children
128/* ShapeFlags.SUSPENSE */&s&&e.normalize(c)):n&&(// compiled element vnode - if children is passed, only possible types are
// string or Array.
c.shapeFlag|=E(n)?8/* ShapeFlags.TEXT_CHILDREN */:16/* ShapeFlags.ARRAY_CHILDREN */),// track vnode for block tree
Io>0&&// avoid a block node from tracking itself
!l&&// has current parent block
No&&(// presence of a patch flag indicates this node needs patching on updates.
// component nodes also should always be patched, because even if the
// component doesn't need to update, it needs to persist the instance on to
// the next vnode so that it can be properly unmounted later.
c.patchFlag>0||6/* ShapeFlags.COMPONENT */&s)&&// the EVENTS flag is only for hydration and if it is the only flag, the
// vnode should not be considered dynamic due to handler caching.
32/* PatchFlags.HYDRATE_EVENTS */!==c.patchFlag&&No.push(c),c}const Jo=e("c",(function(e,t=null,o=null,r=0,s=null,l=!1){if(e&&e!==Un||(e=Po),Wo(e)){// createVNode receiving an existing vnode. This happens in cases like
// <component :is="vnode"/>
// #2078 make sure to merge refs during the clone instead of overwriting it
const n=Xo(e,t,!0/* mergeRef: true */);return o&&er(n,o),Io>0&&!l&&No&&(6/* ShapeFlags.COMPONENT */&n.shapeFlag?No[No.indexOf(e)]=n:No.push(n)),n.patchFlag|=-2/* PatchFlags.BAIL */,n}// class component normalization.
var c;// class & style normalization.
if(k(c=e)&&"__vccOpts"in c&&(e=e.__vccOpts),t){// for reactive or proxy objects, we need to clone it to enable mutation.
t=function(e){return e?it(e)||Ho in e?_({},e):e:null}(t);let{class:e,style:o}=t;e&&!E(e)&&(t.class=i(e)),F(o)&&(// reactive state objects need to be cloned since they are likely to be
// mutated
it(o)&&!x(o)&&(o=_({},o)),t.style=n(o))}// encode the vnode type information into a bitmap
const a=E(e)?1/* ShapeFlags.ELEMENT */:(e=>e.__isSuspense)(e)?128/* ShapeFlags.SUSPENSE */:(e=>e.__isTeleport)(e)?64/* ShapeFlags.TELEPORT */:F(e)?4/* ShapeFlags.STATEFUL_COMPONENT */:k(e)?2/* ShapeFlags.FUNCTIONAL_COMPONENT */:0;return Go(e,t,o,r,s,a,l,!0)}));function Xo(e,t,o=!1){// This is intentionally NOT using spread or extend to avoid the runtime
// key enumeration cost.
const{props:r,ref:s,patchFlag:l,children:c}=e,a=t?function(...e){const t={};for(let o=0;o<e.length;o++){const r=e[o];for(const e in r)if("class"===e)t.class!==r.class&&(t.class=i([t.class,r.class]));else if("style"===e)t.style=n([t.style,r.style]);else if(g(e)){const n=t[e],o=r[e];!o||n===o||x(n)&&n.includes(o)||(t[e]=n?[].concat(n,o):o)}else""!==e&&(t[e]=r[e])}return t}(r||{},t):r;return{__v_isVNode:!0,__v_skip:!0,type:e.type,props:a,key:a&&Ko(a),ref:t&&t.ref?// #2078 in the case of <component :is="vnode" ref="extra"/>
// if the vnode itself already has a ref, cloneVNode will need to merge
// the refs so the single vnode can be set on multiple refs
o&&s?x(s)?s.concat(qo(t)):[s,qo(t)]:qo(t):s,scopeId:e.scopeId,slotScopeIds:e.slotScopeIds,children:c,target:e.target,targetAnchor:e.targetAnchor,staticCount:e.staticCount,shapeFlag:e.shapeFlag,// if the vnode is cloned with extra props, we can no longer assume its
// existing patch flag to be reliable and need to add the FULL_PROPS flag.
// note: preserve flag for fragments since they use the flag for children
// fast paths only.
patchFlag:t&&e.type!==$o?-1===l?16/* PatchFlags.FULL_PROPS */:16/* PatchFlags.FULL_PROPS */|l:l,dynamicProps:e.dynamicProps,dynamicChildren:e.dynamicChildren,appContext:e.appContext,dirs:e.dirs,transition:e.transition,// These should technically only be non-null on mounted VNodes. However,
// they *should* be copied for kept-alive vnodes. So we just always copy
// them since them being non-null during a mount doesn't affect the logic as
// they will simply be overwritten.
component:e.component,suspense:e.suspense,ssContent:e.ssContent&&Xo(e.ssContent),ssFallback:e.ssFallback&&Xo(e.ssFallback),el:e.el,anchor:e.anchor}}
/**
             * @private
             */function Zo(e=" ",t=0){return Jo(Mo,null,e,t)}function Qo(e){return null==e||"boolean"==typeof e?Jo(Po):x(e)?Jo($o,null,// #3666, avoid reference pollution when reusing vnode
e.slice()):"object"==typeof e?Yo(e):Jo(Mo,null,String(e))}// optimized normalization for template-compiled render fns
function Yo(e){return null===e.el&&-1/* PatchFlags.HOISTED */!==e.patchFlag||e.memo?e:Xo(e)}function er(e,t){let n=0;const{shapeFlag:o}=e;if(null==t)t=null;else if(x(t))n=16/* ShapeFlags.ARRAY_CHILDREN */;else if("object"==typeof t){if(65/* ShapeFlags.TELEPORT */&o){// Normalize slot to plain children for plain element and Teleport
const n=t.default;return void(n&&(// _c marker is added by withCtx() indicating this is a compiled slot
n._c&&(n._d=!1),er(e,n()),n._c&&(n._d=!0)))}{n=32/* ShapeFlags.SLOTS_CHILDREN */;const o=t._;o||Ho in t?3/* SlotFlags.FORWARDED */===o&&qt&&(// a child component receives forwarded slots from the parent.
// its slot type is determined by its parent's slot type.
1/* SlotFlags.STABLE */===qt.slots._?t._=1/* SlotFlags.STABLE */:(t._=2/* SlotFlags.DYNAMIC */,e.patchFlag|=1024/* PatchFlags.DYNAMIC_SLOTS */)):t._ctx=qt}}else k(t)?(t={default:t,_ctx:qt},n=32/* ShapeFlags.SLOTS_CHILDREN */):(t=String(t),// force teleport children to array so it can be moved around
64/* ShapeFlags.TELEPORT */&o?(n=16/* ShapeFlags.ARRAY_CHILDREN */,t=[Zo(t)]):n=8/* ShapeFlags.TEXT_CHILDREN */);e.children=t,e.shapeFlag|=n}function tr(e,t,n,o=null){kt(e,t,7/* ErrorCodes.VNODE_HOOK */,[n,o])}const nr=bo();let or=0,rr=null;const sr=e("g",(()=>rr||qt)),lr=e=>{rr=e,e.scope.on()},ir=()=>{rr&&rr.scope.off(),rr=null};function cr(e){return 4/* ShapeFlags.STATEFUL_COMPONENT */&e.vnode.shapeFlag}let ar,ur=!1;function fr(e,t,n){k(t)?// setup returned an inline render function
e.type.__ssrInlineRender?// when the function's name is `ssrRender` (compiled by SFC inline mode),
// set it as ssrRender instead.
e.ssrRender=t:e.render=t:F(t)&&(e.setupState=yt(t)),pr(e,n)}function pr(e,t,n){const o=e.type;// template / render function normalization
// could be already set when returned from setup()
if(!e.render){// only do on-the-fly compile if not in SSR - SSR on-the-fly compilation
// is done by server-renderer
if(!t&&ar&&!o.render){const t=o.template||Zn(e).template;if(t){const{isCustomElement:n,compilerOptions:r}=e.appContext.config,{delimiters:s,compilerOptions:l}=o,i=_(_({isCustomElement:n,delimiters:s},r),l);o.render=ar(t,i)}}e.render=o.render||d}// support for 2.x options
lr(e),fe(),Gn(e),pe(),ir()}function dr(e){const t=t=>{e.exposed=t||{}};let n;return{get attrs(){return n||(n=function(e){return new Proxy(e.attrs,{get:(t,n)=>(de(e,0/* TrackOpTypes.GET */,"$attrs"),t[n])})}(e))},slots:e.slots,emit:e.emit,expose:t}}function hr(e){if(e.exposed)return e.exposeProxy||(e.exposeProxy=new Proxy(yt(at(e.exposed)),{get:(t,n)=>n in t?t[n]:n in Hn?Hn[n](e):void 0,has:(e,t)=>t in e||t in Hn}))}const vr=e("j",((e,t)=>function(e,t,n=!1){let o,r;const s=k(e);return s?(o=e,r=d):(o=e.get,r=e.set),new wt(o,r,s||!r,n)}(e,0,ur)));function gr(e,t,n){const o=arguments.length;return 2===o?F(t)&&!x(t)?// single vnode without props
Wo(t)?Jo(e,null,[t]):Jo(e,t):Jo(e,null,t):(o>3?n=Array.prototype.slice.call(arguments,2):3===o&&Wo(n)&&(n=[n]),Jo(e,t,n))}const mr=Symbol(""),_r=()=>nn(mr),yr="3.2.44",br="undefined"!=typeof document?document:null,Cr=br&&br.createElement("template"),xr={insert:(e,t,n)=>{t.insertBefore(e,n||null)},remove:e=>{const t=e.parentNode;t&&t.removeChild(e)},createElement:(e,t,n,o)=>{const r=t?br.createElementNS("http://www.w3.org/2000/svg",e):br.createElement(e,n?{is:n}:void 0);return"select"===e&&o&&null!=o.multiple&&r.setAttribute("multiple",o.multiple),r},createText:e=>br.createTextNode(e),createComment:e=>br.createComment(e),setText:(e,t)=>{e.nodeValue=t},setElementText:(e,t)=>{e.textContent=t},parentNode:e=>e.parentNode,nextSibling:e=>e.nextSibling,querySelector:e=>br.querySelector(e),setScopeId(e,t){e.setAttribute(t,"")},// __UNSAFE__
// Reason: innerHTML.
// Static content here can only come from compiled templates.
// As long as the user only uses trusted templates, this is safe.
insertStaticContent(e,t,n,o,r,s){// <parent> before | first ... last | anchor </parent>
const l=n?n.previousSibling:t.lastChild;// #5308 can only take cached path if:
// - has a single root node
// - nextSibling info is still available
if(r&&(r===s||r.nextSibling))// cached
for(;t.insertBefore(r.cloneNode(!0),n),r!==s&&(r=r.nextSibling););else{// fresh insert
Cr.innerHTML=o?`<svg>${e}</svg>`:e;const r=Cr.content;if(o){// remove outer svg wrapper
const e=r.firstChild;for(;e.firstChild;)r.appendChild(e.firstChild);r.removeChild(e)}t.insertBefore(r,n)}return[// first
l?l.nextSibling:t.firstChild,// last
n?n.previousSibling:t.lastChild]}},wr=/\s*!important$/;function Sr(e,t,n){if(x(n))n.forEach((n=>Sr(e,t,n)));else if(null==n&&(n=""),t.startsWith("--"))// custom property definition
e.setProperty(t,n);else{const o=function(e,t){const n=Er[t];if(n)return n;let o=V(t);if("filter"!==o&&o in e)return Er[t]=o;o=B(o);for(let r=0;r<kr.length;r++){const n=kr[r]+o;if(n in e)return Er[t]=n}return t}(e,t);wr.test(n)?// !important
e.setProperty(U(o),n.replace(wr,""),"important"):e[o]=n}}const kr=["Webkit","Moz","ms"],Er={},Ar="http://www.w3.org/1999/xlink";function Fr(e,t,n,o,r=null){// vei = vue event invokers
const s=e._vei||(e._vei={}),l=s[t];if(o&&l)// patch
l.value=o;else{const[n,i]=function(e){let t;if(Or.test(e)){let n;for(t={};n=e.match(Or);)e=e.slice(0,e.length-n[0].length),t[n[0].toLowerCase()]=!0}const n=":"===e[2]?e.slice(3):U(e.slice(2));return[n,t]}// To avoid the overhead of repeatedly calling Date.now(), we cache
// and use the same timestamp for all event listeners attached in the same tick.
(t);if(o){// add
const l=s[t]=function(e,t){const n=e=>{// async edge case vuejs/vue#6566
// inner click event triggers patch, event handler
// attached to outer element during patch, and triggered again. This
// happens because browsers fire microtask ticks between event propagation.
// this no longer happens for templates in Vue 3, but could still be
// theoretically possible for hand-written render functions.
// the solution: we save the timestamp when a handler is attached,
// and also attach the timestamp to any event that was handled by vue
// for the first time (to avoid inconsistent event timestamp implementations
// or events fired from iframes, e.g. #2513)
// The handler would only fire if the event passed to it was fired
// AFTER it was attached.
if(e._vts){if(e._vts<=n.attached)return}else e._vts=Date.now();kt(function(e,t){if(x(t)){const n=e.stopImmediatePropagation;return e.stopImmediatePropagation=()=>{n.call(e),e._stopped=!0},t.map((e=>t=>!t._stopped&&e&&e(t)))}return t}(e,n.value),t,5/* ErrorCodes.NATIVE_EVENT_HANDLER */,[e])};return n.value=e,n.attached=$r(),n}(o,r);!function(e,t,n,o){e.addEventListener(t,n,o)}(e,n,l,i)}else l&&(// remove
function(e,t,n,o){e.removeEventListener(t,n,o)}(e,n,l,i),s[t]=void 0)}}const Or=/(?:Once|Passive|Capture)$/;let Tr=0;const Lr=Promise.resolve(),$r=()=>Tr||(Lr.then((()=>Tr=0)),Tr=Date.now()),Mr=/^on[a-z]/,Pr="transition",jr="animation",Rr=e("t",((e,{slots:t})=>gr(pn,Br(e),t)));Rr.displayName="Transition";const Nr={name:String,type:String,css:{type:Boolean,default:!0},duration:[String,Number,Object],enterFromClass:String,enterActiveClass:String,enterToClass:String,appearFromClass:String,appearActiveClass:String,appearToClass:String,leaveFromClass:String,leaveActiveClass:String,leaveToClass:String},Vr=Rr.props=_({},pn.props,Nr),Ir=(e,t=[])=>{x(e)?e.forEach((e=>e(...t))):e&&e(...t)},Ur=e=>!!e&&(x(e)?e.some((e=>e.length>1)):e.length>1);function Br(e){const t={};for(const _ in e)_ in Nr||(t[_]=e[_]);if(!1===e.css)return t;const{name:n="v",type:o,duration:r,enterFromClass:s=`${n}-enter-from`,enterActiveClass:l=`${n}-enter-active`,enterToClass:i=`${n}-enter-to`,appearFromClass:c=s,appearActiveClass:a=l,appearToClass:u=i,leaveFromClass:f=`${n}-leave-from`,leaveActiveClass:p=`${n}-leave-active`,leaveToClass:d=`${n}-leave-to`}=e,h=function(e){if(null==e)return null;if(F(e))return[Dr(e.enter),Dr(e.leave)];{const t=Dr(e);return[t,t]}}(r),v=h&&h[0],g=h&&h[1],{onBeforeEnter:m,onEnter:y,onEnterCancelled:b,onLeave:C,onLeaveCancelled:x,onBeforeAppear:w=m,onAppear:S=y,onAppearCancelled:k=b}=t,E=(e,t,n)=>{zr(e,t?u:i),zr(e,t?a:l),n&&n()},A=(e,t)=>{e._isLeaving=!1,zr(e,f),zr(e,d),zr(e,p),t&&t()},O=e=>(t,n)=>{const r=e?S:y,l=()=>E(t,e,n);Ir(r,[t,l]),Hr((()=>{zr(t,e?c:s),Wr(t,e?u:i),Ur(r)||qr(t,o,v,l)}))};return _(t,{onBeforeEnter(e){Ir(m,[e]),Wr(e,s),Wr(e,l)},onBeforeAppear(e){Ir(w,[e]),Wr(e,c),Wr(e,a)},onEnter:O(!1),onAppear:O(!0),onLeave(e,t){e._isLeaving=!0;const n=()=>A(e,t);Wr(e,f),// force reflow so *-leave-from classes immediately take effect (#2593)
Zr(),Wr(e,p),Hr((()=>{e._isLeaving&&(zr(e,f),Wr(e,d),Ur(C)||qr(e,o,g,n))})),Ir(C,[e,n])},onEnterCancelled(e){E(e,!1),Ir(b,[e])},onAppearCancelled(e){E(e,!0),Ir(k,[e])},onLeaveCancelled(e){A(e),Ir(x,[e])}})}function Dr(e){return K(e)}function Wr(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.add(t))),(e._vtc||(e._vtc=new Set)).add(t)}function zr(e,t){t.split(/\s+/).forEach((t=>t&&e.classList.remove(t)));const{_vtc:n}=e;n&&(n.delete(t),n.size||(e._vtc=void 0))}function Hr(e){requestAnimationFrame((()=>{requestAnimationFrame(e)}))}let Kr=0;function qr(e,t,n,o){const r=e._endId=++Kr,s=()=>{r===e._endId&&o()};if(n)return setTimeout(s,n);const{type:l,timeout:i,propCount:c}=Gr(e,t);if(!l)return o();const a=l+"end";let u=0;const f=()=>{e.removeEventListener(a,p),s()},p=t=>{t.target===e&&++u>=c&&f()};setTimeout((()=>{u<c&&f()}),i+1),e.addEventListener(a,p)}function Gr(e,t){const n=window.getComputedStyle(e),o=e=>(n[e]||"").split(", "),r=o(`${Pr}Delay`),s=o(`${Pr}Duration`),l=Jr(r,s),i=o(`${jr}Delay`),c=o(`${jr}Duration`),a=Jr(i,c);// JSDOM may return undefined for transition properties
let u=null,f=0,p=0;/* istanbul ignore if */return t===Pr?l>0&&(u=Pr,f=l,p=s.length):t===jr?a>0&&(u=jr,f=a,p=c.length):(f=Math.max(l,a),u=f>0?l>a?Pr:jr:null,p=u?u===Pr?s.length:c.length:0),{type:u,timeout:f,propCount:p,hasTransform:u===Pr&&/\b(transform|all)(,|$)/.test(o(`${Pr}Property`).toString())}}function Jr(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max(...t.map(((t,n)=>Xr(t)+Xr(e[n]))))}// Old versions of Chromium (below 61.0.3163.100) formats floating pointer
// numbers in a locale-dependent way, using a comma instead of a dot.
// If comma is not replaced with a dot, the input will be rounded down
// (i.e. acting as a floor function) causing unexpected behaviors
function Xr(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}// synchronously force layout to put elements into a certain state
function Zr(){return document.body.offsetHeight}const Qr=new WeakMap,Yr=new WeakMap;function es(e){const t=e.el;t._moveCb&&t._moveCb(),t._enterCb&&t._enterCb()}function ts(e){Yr.set(e,e.el.getBoundingClientRect())}function ns(e){const t=Qr.get(e),n=Yr.get(e),o=t.left-n.left,r=t.top-n.top;if(o||r){const t=e.el.style;return t.transform=t.webkitTransform=`translate(${o}px,${r}px)`,t.transitionDuration="0s",e}}e("O",{name:"TransitionGroup",props:_({},Vr,{tag:String,moveClass:String}),setup(e,{slots:t}){const n=sr(),o=un();let r,s;return Tn((()=>{// children is guaranteed to exist after initial render
if(!r.length)return;const t=e.moveClass||`${e.name||"v"}-move`;if(!function(e,t,n){// Detect whether an element with the move class applied has
// CSS transitions. Since the element may be inside an entering
// transition at this very moment, we make a clone of it and remove
// all other transition classes applied to ensure only the move class
// is applied.
const o=e.cloneNode();e._vtc&&e._vtc.forEach((e=>{e.split(/\s+/).forEach((e=>e&&o.classList.remove(e)))})),n.split(/\s+/).forEach((e=>e&&o.classList.add(e))),o.style.display="none";const r=1===t.nodeType?t:t.parentNode;r.appendChild(o);const{hasTransform:s}=Gr(o);return r.removeChild(o),s}(r[0].el,n.vnode.el,t))return;// we divide the work into three loops to avoid mixing DOM reads and writes
// in each iteration - which helps prevent layout thrashing.
r.forEach(es),r.forEach(ts);const o=r.filter(ns);// force reflow to put everything in position
Zr(),o.forEach((e=>{const n=e.el,o=n.style;Wr(n,t),o.transform=o.webkitTransform=o.transitionDuration="";const r=n._moveCb=e=>{e&&e.target!==n||e&&!/transform$/.test(e.propertyName)||(n.removeEventListener("transitionend",r),n._moveCb=null,zr(n,t))};n.addEventListener("transitionend",r)}))})),()=>{const l=ct(e),i=Br(l);let c=l.tag||$o;r=s,s=t.default?_n(t.default()):[];for(let e=0;e<s.length;e++){const t=s[e];null!=t.key&&mn(t,hn(t,i,o,n))}if(r)for(let e=0;e<r.length;e++){const t=r[e];mn(t,hn(t,i,o,n)),Qr.set(t,t.el.getBoundingClientRect())}return Jo(c,null,s)}}});const os=["ctrl","shift","alt","meta"],rs={stop:e=>e.stopPropagation(),prevent:e=>e.preventDefault(),self:e=>e.target!==e.currentTarget,ctrl:e=>!e.ctrlKey,shift:e=>!e.shiftKey,alt:e=>!e.altKey,meta:e=>!e.metaKey,left:e=>"button"in e&&0!==e.button,middle:e=>"button"in e&&1!==e.button,right:e=>"button"in e&&2!==e.button,exact:(e,t)=>os.some((n=>e[`${n}Key`]&&!t.includes(n)))};function ss(e,t){e.style.display=t?e._vod:"none"}e("A",((e,t)=>(n,...o)=>{for(let e=0;e<t.length;e++){const o=rs[t[e]];if(o&&o(n,t))return}return e(n,...o)})),e("z",{beforeMount(e,{value:t},{transition:n}){e._vod="none"===e.style.display?"":e.style.display,n&&t?n.beforeEnter(e):ss(e,t)},mounted(e,{value:t},{transition:n}){n&&t&&n.enter(e)},updated(e,{value:t,oldValue:n},{transition:o}){!t!=!n&&(o?t?(o.beforeEnter(e),ss(e,!0),o.enter(e)):o.leave(e,(()=>{ss(e,!1)})):ss(e,t))},beforeUnmount(e,{value:t}){ss(e,t)}});const ls=_({patchProp:(e,t,n,o,r=!1,s,l,i,u)=>{"class"===t?// compiler should normalize class + :class bindings on the same element
// into a single binding ['staticClass', dynamic]
function(e,t,n){// directly setting className should be faster than setAttribute in theory
// if this is an element during a transition, take the temporary transition
// classes into account.
const o=e._vtc;o&&(t=(t?[t,...o]:[...o]).join(" ")),null==t?e.removeAttribute("class"):n?e.setAttribute("class",t):e.className=t}(e,o,r):"style"===t?function(e,t,n){const o=e.style,r=E(n);if(n&&!r){for(const e in n)Sr(o,e,n[e]);if(t&&!E(t))for(const e in t)null==n[e]&&Sr(o,e,"")}else{const s=o.display;r?t!==n&&(o.cssText=n):t&&e.removeAttribute("style"),// indicates that the `display` of the element is controlled by `v-show`,
// so we always keep the current `display` value regardless of the `style`
// value, thus handing over control to `v-show`.
"_vod"in e&&(o.display=s)}}(e,n,o):g(t)?// ignore v-model listeners
m(t)||Fr(e,t,0,o,l):("."===t[0]?(t=t.slice(1),1):"^"===t[0]?(t=t.slice(1),0):function(e,t,n,o){return o?// most keys must be set as attribute on svg elements to work
// ...except innerHTML & textContent
"innerHTML"===t||"textContent"===t||!!(t in e&&Mr.test(t)&&k(n)):// these are enumerated attrs, however their corresponding DOM properties
// are actually booleans - this leads to setting it with a string "false"
// value leading it to be coerced to `true`, so we need to always treat
// them as attributes.
// Note that `contentEditable` doesn't have this problem: its DOM
// property is also enumerated string values.
"spellcheck"!==t&&"draggable"!==t&&"translate"!==t&&(// #1787, #2840 form property on form elements is readonly and must be set as
// attribute.
"form"!==t&&(// #1526 <input list> must be set as attribute
("list"!==t||"INPUT"!==e.tagName)&&(// #2766 <textarea type> must be set as attribute
("type"!==t||"TEXTAREA"!==e.tagName)&&(// native onclick with string value, must be set as attribute
(!Mr.test(t)||!E(n))&&t in e))))}(e,t,o,r))?// __UNSAFE__
// functions. The user is responsible for using them with only trusted content.
function(e,t,n,// the following args are passed only due to potential innerHTML/textContent
// overriding existing VNodes, in which case the old tree must be properly
// unmounted.
o,r,s,l){if("innerHTML"===t||"textContent"===t)return o&&l(o,r,s),void(e[t]=null==n?"":n);if("value"===t&&"PROGRESS"!==e.tagName&&// custom elements may use _value internally
!e.tagName.includes("-")){// store value as _value as well since
// non-string values will be stringified.
e._value=n;const o=null==n?"":n;return e.value===o&&// #4956: always set for OPTION elements because its value falls back to
// textContent if no value attribute is present. And setting .value for
// OPTION has no side effect
"OPTION"!==e.tagName||(e.value=o),void(null==n&&e.removeAttribute(t))}let i=!1;if(""===n||null==n){const o=typeof e[t];"boolean"===o?// e.g. <select multiple> compiles to { multiple: '' }
n=a(n):null==n&&"string"===o?(// e.g. <div :id="null">
n="",i=!0):"number"===o&&(// e.g. <img :width="null">
n=0,i=!0)}// some properties perform value validation and throw,
// some properties has getter, no setter, will error in 'use strict'
// eg. <select :type="null"></select> <select :willValidate="null"></select>
try{e[t]=n}catch(c){}i&&e.removeAttribute(t)}(e,t,o,s,l,i,u):(// special case for <input v-model type="checkbox"> with
// :true-value & :false-value
// store value as dom properties since non-string values will be
// stringified.
"true-value"===t?e._trueValue=o:"false-value"===t&&(e._falseValue=o),function(e,t,n,o,r){if(o&&t.startsWith("xlink:"))null==n?e.removeAttributeNS(Ar,t.slice(6,t.length)):e.setAttributeNS(Ar,t,n);else{// note we are only checking boolean attributes that don't have a
// corresponding dom prop of the same name here.
const o=c(t);null==n||o&&!a(n)?e.removeAttribute(t):e.setAttribute(t,o?"":n)}}(e,t,o,r))}},xr);// lazy create the renderer - this makes core renderer logic tree-shakable
// in case the user only imports reactivity utilities from Vue.
let is;function cs(){return is||(is=ko(ls))}// use explicit type casts here to avoid import() calls in rolled-up d.ts
e("I",((...e)=>{cs().render(...e)})),e("R",((...e)=>{const t=cs().createApp(...e),{mount:n}=t;return t.mount=e=>{const o=function(e){return E(e)?document.querySelector(e):e}(e);if(!o)return;const r=t._component;k(r)||r.render||r.template||(// __UNSAFE__
// Reason: potential execution of JS expressions in in-DOM template.
// The user must make sure the in-DOM template is trusted. If it's
// rendered by the server, the template should not contain any user data.
r.template=o.innerHTML),// clear content before mounting
o.innerHTML="";const s=n(o,!1,o instanceof SVGElement);return o instanceof Element&&(o.removeAttribute("v-cloak"),o.setAttribute("data-v-app","")),s},t}))}}}));
